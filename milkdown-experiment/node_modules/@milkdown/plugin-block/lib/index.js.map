{"version":3,"file":"index.js","sources":["../src/__internal__/with-meta.ts","../src/block-config.ts","../src/__internal__/select-node-by-dom.ts","../src/__internal__/serialize-for-clipboard.ts","../src/block-service.ts","../src/block-plugin.ts","../src/block-provider.ts","../src/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/plugin-block',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import type { Node, ResolvedPos } from '@milkdown/prose/model'\n\nimport { findParent } from '@milkdown/prose'\nimport { $ctx } from '@milkdown/utils'\n\nimport { withMeta } from './__internal__/with-meta'\n\n/// @internal\nexport type FilterNodes = (pos: ResolvedPos, node: Node) => boolean\n\n/// @internal\nexport const defaultNodeFilter: FilterNodes = (pos) => {\n  const table = findParent((node) => node.type.name === 'table')(pos)\n  if (table) return false\n\n  return true\n}\n\n/// A slice contains the block config.\n/// Possible properties:\n/// - `filterNodes`: A function to filter nodes that can be dragged.\nexport const blockConfig = $ctx<{ filterNodes: FilterNodes }, 'blockConfig'>(\n  { filterNodes: defaultNodeFilter },\n  'blockConfig'\n)\n\nwithMeta(blockConfig, {\n  displayName: 'Ctx<blockConfig>',\n})\n","import type { EditorView } from '@milkdown/prose/view'\n\nimport type { FilterNodes } from '../block-config'\nimport type { ActiveNode } from '../types'\n\nexport function selectRootNodeByDom(\n  view: EditorView,\n  coords: { x: number; y: number },\n  filterNodes: FilterNodes\n): ActiveNode | null {\n  const root = view.dom.parentElement\n  if (!root) return null\n\n  try {\n    const pos = view.posAtCoords({\n      left: coords.x,\n      top: coords.y,\n    })?.inside\n    if (pos == null || pos < 0) return null\n\n    let $pos = view.state.doc.resolve(pos)\n    let node = view.state.doc.nodeAt(pos)\n    let element = view.nodeDOM(pos) as HTMLElement | null\n\n    const filter = (needLookup: boolean) => {\n      const checkDepth = $pos.depth >= 1 && $pos.index($pos.depth) === 0\n      const shouldLookUp = needLookup || checkDepth\n\n      if (!shouldLookUp) return\n\n      const ancestorPos = $pos.before($pos.depth)\n      node = view.state.doc.nodeAt(ancestorPos)\n      element = view.nodeDOM(ancestorPos) as HTMLElement | null\n      $pos = view.state.doc.resolve(ancestorPos)\n\n      if (!filterNodes($pos, node!)) filter(true)\n    }\n\n    // If filterNodes returns false, we should look up the parent node.\n    const filterResult = filterNodes($pos, node!)\n    filter(!filterResult)\n\n    if (!element || !node) return null\n\n    return { node, $pos, el: element }\n  } catch {\n    return null\n  }\n}\n","/**\n * Copy pasted from https://github.com/ProseMirror/prosemirror-view/blob/master/src/clipboard.ts\n */\n\nimport type { NodeType, Slice } from '@milkdown/prose/model'\nimport type { EditorView } from '@milkdown/prose/view'\n\nimport { DOMSerializer } from '@milkdown/prose/model'\n\nlet _detachedDoc: Document | null = null\nfunction detachedDoc() {\n  return (\n    _detachedDoc ||\n    (_detachedDoc = document.implementation.createHTMLDocument('title'))\n  )\n}\n\nconst wrapMap: { [node: string]: string[] } = {\n  thead: ['table'],\n  tbody: ['table'],\n  tfoot: ['table'],\n  caption: ['table'],\n  colgroup: ['table'],\n  col: ['table', 'colgroup'],\n  tr: ['table', 'tbody'],\n  td: ['table', 'tbody', 'tr'],\n  th: ['table', 'tbody', 'tr'],\n}\n\nexport function serializeForClipboard(view: EditorView, slice: Slice) {\n  const context = []\n  let { openStart, openEnd, content } = slice\n  while (\n    openStart > 1 &&\n    openEnd > 1 &&\n    content.childCount === 1 &&\n    content.firstChild!.childCount === 1\n  ) {\n    openStart -= 1\n    openEnd -= 1\n    const node = content.firstChild!\n    context.push(\n      node.type.name,\n      node.attrs !==\n        (node.type as NodeType & { defaultAttrs: unknown }).defaultAttrs\n        ? node.attrs\n        : null\n    )\n    content = node.content\n  }\n\n  const serializer =\n    view.someProp('clipboardSerializer') ||\n    DOMSerializer.fromSchema(view.state.schema)\n  const doc = detachedDoc()\n  const wrap = doc.createElement('div')\n  wrap.appendChild(serializer.serializeFragment(content, { document: doc }))\n\n  let firstChild = wrap.firstChild\n  let needsWrap\n  let wrappers = 0\n  while (\n    firstChild &&\n    firstChild.nodeType === 1 &&\n    (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])\n  ) {\n    for (let i = needsWrap.length - 1; i >= 0; i--) {\n      const wrapper = doc.createElement(needsWrap[i] as string)\n      while (wrap.firstChild) wrapper.appendChild(wrap.firstChild)\n      wrap.appendChild(wrapper)\n      wrappers++\n    }\n    firstChild = wrap.firstChild\n  }\n\n  if (firstChild && firstChild.nodeType === 1) {\n    ;(firstChild as HTMLElement).setAttribute(\n      'data-pm-slice',\n      `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ''} ${JSON.stringify(context)}`\n    )\n  }\n\n  const text =\n    view.someProp('clipboardTextSerializer', (f) => f(slice, view)) ||\n    slice.content.textBetween(0, slice.content.size, '\\n\\n')\n\n  return { dom: wrap, text }\n}\n","import type { Ctx } from '@milkdown/ctx'\nimport type { Selection } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\n\nimport { editorViewCtx } from '@milkdown/core'\nimport { browser } from '@milkdown/prose'\nimport { NodeSelection } from '@milkdown/prose/state'\nimport throttle from 'lodash.throttle'\n\nimport type { FilterNodes } from './block-config'\nimport type { ActiveNode } from './types'\n\nimport { selectRootNodeByDom } from './__internal__/select-node-by-dom'\nimport { serializeForClipboard } from './__internal__/serialize-for-clipboard'\nimport { blockConfig } from './block-config'\n\nconst brokenClipboardAPI =\n  (browser.ie && <number>browser.ie_version < 15) ||\n  (browser.ios && browser.webkit_version < 604)\n\nconst buffer = 20\n\n/// @internal\nexport type BlockServiceMessageType =\n  | {\n      type: 'hide'\n    }\n  | {\n      type: 'show'\n      active: ActiveNode\n    }\n\n/// @internal\nexport type BlockServiceMessage = (message: BlockServiceMessageType) => void\n\n/// @internal\n/// The block service, provide events and methods for block plugin.\n/// Generally you don't need to use this class directly.\nexport class BlockService {\n  /// @internal\n  #ctx?: Ctx\n\n  /// @internal\n  #createSelection: () => null | Selection = () => {\n    if (!this.#active) return null\n    const result = this.#active\n    const view = this.#view\n\n    if (view && NodeSelection.isSelectable(result.node)) {\n      const nodeSelection = NodeSelection.create(\n        view.state.doc,\n        result.$pos.pos\n      )\n      view.dispatch(view.state.tr.setSelection(nodeSelection))\n      view.focus()\n      this.#activeSelection = nodeSelection\n      return nodeSelection\n    }\n    return null\n  }\n\n  /// @internal\n  #activeSelection: null | Selection = null\n  /// @internal\n  #active: null | ActiveNode = null\n  /// @internal\n  #activeDOMRect: undefined | DOMRect = undefined\n\n  /// @internal\n  #dragging = false\n\n  /// @internal\n  get #filterNodes(): FilterNodes | undefined {\n    return this.#ctx?.get(blockConfig.key).filterNodes\n  }\n\n  /// @internal\n  get #view() {\n    return this.#ctx?.get(editorViewCtx)\n  }\n\n  /// @internal\n  #notify?: BlockServiceMessage\n\n  /// @internal\n  #hide = () => {\n    this.#notify?.({ type: 'hide' })\n    this.#active = null\n  }\n\n  /// @internal\n  #show = (active: ActiveNode) => {\n    this.#active = active\n    this.#notify?.({ type: 'show', active })\n  }\n\n  /// Bind editor context and notify function to the service.\n  bind = (ctx: Ctx, notify: BlockServiceMessage) => {\n    this.#ctx = ctx\n    this.#notify = notify\n  }\n\n  /// Add mouse event to the dom.\n  addEvent = (dom: HTMLElement) => {\n    dom.addEventListener('mousedown', this.#handleMouseDown)\n    dom.addEventListener('mouseup', this.#handleMouseUp)\n    dom.addEventListener('dragstart', this.#handleDragStart)\n  }\n\n  /// Remove mouse event to the dom.\n  removeEvent = (dom: HTMLElement) => {\n    dom.removeEventListener('mousedown', this.#handleMouseDown)\n    dom.removeEventListener('mouseup', this.#handleMouseUp)\n    dom.removeEventListener('dragstart', this.#handleDragStart)\n  }\n\n  /// Unbind the notify function.\n  unBind = () => {\n    this.#notify = undefined\n  }\n\n  /// @internal\n  #handleMouseDown = () => {\n    this.#activeDOMRect = this.#active?.el.getBoundingClientRect()\n    this.#createSelection()\n  }\n\n  /// @internal\n  #handleMouseUp = () => {\n    if (!this.#dragging) {\n      requestAnimationFrame(() => {\n        if (!this.#activeDOMRect) return\n        this.#view?.focus()\n      })\n\n      return\n    }\n    this.#dragging = false\n    this.#activeSelection = null\n  }\n\n  /// @internal\n  #handleDragStart = (event: DragEvent) => {\n    this.#dragging = true\n\n    const view = this.#view\n    if (!view) return\n    view.dom.dataset.dragging = 'true'\n\n    const selection = this.#activeSelection\n    if (event.dataTransfer && selection) {\n      const slice = selection.content()\n      event.dataTransfer.effectAllowed = 'copyMove'\n      const { dom, text } = serializeForClipboard(view, slice)\n      event.dataTransfer.clearData()\n      event.dataTransfer.setData(\n        brokenClipboardAPI ? 'Text' : 'text/html',\n        dom.innerHTML\n      )\n      if (!brokenClipboardAPI) event.dataTransfer.setData('text/plain', text)\n      const activeEl = this.#active?.el\n      if (activeEl) event.dataTransfer.setDragImage(activeEl, 0, 0)\n\n      view.dragging = {\n        slice,\n        move: true,\n      }\n    }\n  }\n\n  /// @internal\n  keydownCallback = (view: EditorView) => {\n    this.#hide()\n\n    this.#dragging = false\n    view.dom.dataset.dragging = 'false'\n    return false\n  }\n\n  /// @internal\n  #mousemoveCallback = throttle((view: EditorView, event: MouseEvent) => {\n    if (!view.editable) return\n\n    const rect = view.dom.getBoundingClientRect()\n    const x = rect.left + rect.width / 2\n    const dom = view.root.elementFromPoint(x, event.clientY)\n    if (!(dom instanceof Element)) {\n      this.#hide()\n      return\n    }\n\n    const filterNodes = this.#filterNodes\n    if (!filterNodes) return\n\n    const result = selectRootNodeByDom(\n      view,\n      { x, y: event.clientY },\n      filterNodes\n    )\n\n    if (!result) {\n      this.#hide()\n      return\n    }\n    this.#show(result)\n  }, 200)\n\n  /// @internal\n  mousemoveCallback = (view: EditorView, event: MouseEvent) => {\n    if (view.composing || !view.editable) return false\n\n    this.#mousemoveCallback(view, event)\n\n    return false\n  }\n\n  /// @internal\n  dragoverCallback = (view: EditorView, event: DragEvent) => {\n    if (this.#dragging) {\n      const root = this.#view?.dom.parentElement\n      if (!root) return false\n\n      const hasHorizontalScrollbar = root.scrollHeight > root.clientHeight\n\n      const rootRect = root.getBoundingClientRect()\n      if (hasHorizontalScrollbar) {\n        if (root.scrollTop > 0 && Math.abs(event.y - rootRect.y) < buffer) {\n          const top = root.scrollTop > 10 ? root.scrollTop - 10 : 0\n          root.scrollTop = top\n          return false\n        }\n        const totalHeight = Math.round(view.dom.getBoundingClientRect().height)\n        const scrollBottom = Math.round(root.scrollTop + rootRect.height)\n        if (\n          scrollBottom < totalHeight &&\n          Math.abs(event.y - (rootRect.height + rootRect.y)) < buffer\n        ) {\n          const top = root.scrollTop + 10\n          root.scrollTop = top\n          return false\n        }\n      }\n    }\n    return false\n  }\n\n  /// @internal\n  dragenterCallback = (view: EditorView) => {\n    if (!view.dragging) return\n\n    this.#dragging = true\n    view.dom.dataset.dragging = 'true'\n  }\n\n  /// @internal\n  dragleaveCallback = (view: EditorView, event: DragEvent) => {\n    const x = event.clientX\n    const y = event.clientY\n    // if cursor out of the editor\n    if (x < 0 || y < 0 || x > window.innerWidth || y > window.innerHeight) {\n      this.#active = null\n      this.#dragEnd(view)\n    }\n  }\n\n  /// @internal\n  dropCallback = (view: EditorView) => {\n    this.#dragEnd(view)\n\n    return false\n  }\n\n  /// @internal\n  dragendCallback = (view: EditorView) => {\n    this.#dragEnd(view)\n  }\n\n  /// @internal\n  #dragEnd = (view: EditorView) => {\n    this.#dragging = false\n    view.dom.dataset.dragging = 'false'\n  }\n}\n","import type { PluginSpec } from '@milkdown/prose/state'\n\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $ctx, $prose } from '@milkdown/utils'\n\nimport { withMeta } from './__internal__/with-meta'\nimport { BlockService } from './block-service'\n\n/// @internal\nexport const blockService = $ctx(() => new BlockService(), 'blockService')\n\n/// @internal\nexport const blockServiceInstance = $ctx(\n  {} as BlockService,\n  'blockServiceInstance'\n)\n\nwithMeta(blockService, {\n  displayName: 'Ctx<blockService>',\n})\n\nwithMeta(blockServiceInstance, {\n  displayName: 'Ctx<blockServiceInstance>',\n})\n\n/// A slice contains a factory that will return a plugin spec.\n/// Users can use this slice to customize the plugin.\nexport const blockSpec = $ctx<PluginSpec<any>, 'blockSpec'>({}, 'blockSpec')\n\nwithMeta(blockSpec, {\n  displayName: 'Ctx<blockSpec>',\n})\n\n/// The block prosemirror plugin.\nexport const blockPlugin = $prose((ctx) => {\n  const milkdownPluginBlockKey = new PluginKey('MILKDOWN_BLOCK')\n  const getService = ctx.get(blockService.key)\n  const service = getService()\n  ctx.set(blockServiceInstance.key, service)\n  const spec = ctx.get(blockSpec.key)\n\n  return new Plugin({\n    key: milkdownPluginBlockKey,\n    ...spec,\n    props: {\n      ...spec.props,\n      handleDOMEvents: {\n        drop: (view) => {\n          return service.dropCallback(view)\n        },\n        pointermove: (view, event) => {\n          return service.mousemoveCallback(view, event)\n        },\n        keydown: (view) => {\n          return service.keydownCallback(view)\n        },\n        dragover: (view, event) => {\n          return service.dragoverCallback(view, event)\n        },\n        dragleave: (view, event) => {\n          return service.dragleaveCallback(view, event)\n        },\n        dragenter: (view) => {\n          return service.dragenterCallback(view)\n        },\n        dragend: (view) => {\n          return service.dragendCallback(view)\n        },\n      },\n    },\n  })\n})\n\nwithMeta(blockPlugin, {\n  displayName: 'Prose<block>',\n})\n","import type {\n  ComputePositionConfig,\n  Middleware,\n  OffsetOptions,\n  Placement,\n  VirtualElement,\n} from '@floating-ui/dom'\nimport type { Ctx } from '@milkdown/ctx'\nimport type { EditorState } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\n\nimport { computePosition, flip, offset } from '@floating-ui/dom'\nimport { editorViewCtx } from '@milkdown/core'\n\nimport type { BlockService } from './block-service'\nimport type { ActiveNode } from './types'\n\nimport { blockServiceInstance } from './block-plugin'\n\n/// The context of the block provider.\nexport interface DeriveContext {\n  ctx: Ctx\n  active: ActiveNode\n  editorDom: HTMLElement\n  blockDom: HTMLElement\n}\n\n/// Options for creating block provider.\nexport interface BlockProviderOptions {\n  /// The context of the editor.\n  ctx: Ctx\n  /// The content of the block.\n  content: HTMLElement\n  /// The function to determine whether the tooltip should be shown.\n  shouldShow?: (view: EditorView, prevState?: EditorState) => boolean\n  /// The offset to get the block. Default is 0.\n  getOffset?: (deriveContext: DeriveContext) => OffsetOptions\n  /// The function to get the position of the block. Default is the position of the active node.\n  getPosition?: (deriveContext: DeriveContext) => Omit<DOMRect, 'toJSON'>\n  /// The function to get the placement of the block. Default is 'left'.\n  getPlacement?: (deriveContext: DeriveContext) => Placement\n  /// Other middlewares for floating ui. This will be added after the internal middlewares.\n  middleware?: Middleware[]\n  /// Options for floating ui. If you pass `middleware` or `placement`, it will override the internal settings.\n  floatingUIOptions?: Partial<ComputePositionConfig>\n  /// The root element that the block will be appended to.\n  root?: HTMLElement\n}\n\n/// A provider for creating block.\nexport class BlockProvider {\n  /// @internal\n  readonly #element: HTMLElement\n\n  /// @internal\n  readonly #ctx: Ctx\n\n  /// @internal\n  #service?: BlockService\n\n  /// @internal\n  #activeNode: ActiveNode | null = null\n\n  /// @internal\n  readonly #root?: HTMLElement\n\n  /// @internal\n  #initialized = false\n\n  /// @internal\n  readonly #middleware: Middleware[]\n\n  /// @internal\n  readonly #floatingUIOptions: Partial<ComputePositionConfig>\n\n  /// @internal\n  readonly #getOffset?: (deriveContext: DeriveContext) => OffsetOptions\n\n  /// @internal\n  readonly #getPosition?: (\n    deriveContext: DeriveContext\n  ) => Omit<DOMRect, 'toJSON'>\n\n  /// @internal\n  readonly #getPlacement?: (deriveContext: DeriveContext) => Placement\n\n  /// The context of current active node.\n  get active() {\n    return this.#activeNode\n  }\n\n  constructor(options: BlockProviderOptions) {\n    this.#ctx = options.ctx\n    this.#element = options.content\n    this.#getOffset = options.getOffset\n    this.#getPosition = options.getPosition\n    this.#getPlacement = options.getPlacement\n    this.#middleware = options.middleware ?? []\n    this.#floatingUIOptions = options.floatingUIOptions ?? {}\n    this.#root = options.root\n    this.hide()\n  }\n\n  /// @internal\n  #init() {\n    const view = this.#ctx.get(editorViewCtx)\n    const root = this.#root ?? view.dom.parentElement ?? document.body\n    root.appendChild(this.#element)\n\n    const service = this.#ctx.get(blockServiceInstance.key)\n    service.bind(this.#ctx, (message) => {\n      if (message.type === 'hide') {\n        this.hide()\n        this.#activeNode = null\n      } else if (message.type === 'show') {\n        this.show(message.active)\n        this.#activeNode = message.active\n      }\n    })\n\n    this.#service = service\n    this.#service.addEvent(this.#element)\n    this.#element.draggable = true\n  }\n\n  /// Update provider state by editor view.\n  update = (): void => {\n    requestAnimationFrame(() => {\n      if (!this.#initialized) {\n        try {\n          this.#init()\n          this.#initialized = true\n        } catch {\n          // ignore\n        }\n      }\n    })\n  }\n\n  /// Destroy the block.\n  destroy = () => {\n    this.#service?.unBind()\n    this.#service?.removeEvent(this.#element)\n    this.#element.remove()\n  }\n\n  /// Show the block.\n  show = (active: ActiveNode) => {\n    const dom = active.el\n    const editorDom = this.#ctx.get(editorViewCtx).dom\n    const deriveContext: DeriveContext = {\n      ctx: this.#ctx,\n      active,\n      editorDom,\n      blockDom: this.#element,\n    }\n    const virtualEl: VirtualElement = {\n      contextElement: dom,\n      getBoundingClientRect: () => {\n        if (this.#getPosition) return this.#getPosition(deriveContext)\n\n        return dom.getBoundingClientRect()\n      },\n    }\n    const middleware = [flip()]\n    if (this.#getOffset) {\n      const offsetOption = this.#getOffset(deriveContext)\n      const offsetExt = offset(offsetOption)\n      middleware.push(offsetExt)\n    }\n\n    computePosition(virtualEl, this.#element, {\n      placement: this.#getPlacement\n        ? this.#getPlacement(deriveContext)\n        : 'left',\n      middleware: [...middleware, ...this.#middleware],\n      ...this.#floatingUIOptions,\n    })\n      .then(({ x, y }) => {\n        Object.assign(this.#element.style, {\n          left: `${x}px`,\n          top: `${y}px`,\n        })\n        this.#element.dataset.show = 'true'\n      })\n      .catch(console.error)\n  }\n\n  /// Hide the block.\n  hide = () => {\n    this.#element.dataset.show = 'false'\n  }\n}\n","import type { SliceType } from '@milkdown/ctx'\nimport type { PluginSpec } from '@milkdown/prose/state'\nimport type { $Ctx, $Prose } from '@milkdown/utils'\n\nimport type { FilterNodes } from './block-config'\nimport type { BlockService } from './block-service'\n\nimport { blockConfig } from './block-config'\nimport {\n  blockPlugin,\n  blockService,\n  blockServiceInstance,\n  blockSpec,\n} from './block-plugin'\n\nexport * from './block-plugin'\nexport * from './block-provider'\nexport * from './block-service'\nexport * from './block-config'\nexport * from './types'\n\n/// @internal\nexport type BlockPlugin = [\n  $Ctx<PluginSpec<any>, 'blockSpec'>,\n  $Ctx<{ filterNodes: FilterNodes }, 'blockConfig'>,\n  $Ctx<() => BlockService, 'blockService'>,\n  $Ctx<BlockService, 'blockServiceInstance'>,\n  $Prose,\n] & {\n  key: SliceType<PluginSpec<any>, 'blockSpec'>\n  pluginKey: $Prose['key']\n}\n\n/// All plugins exported by this package.\nexport const block = [\n  blockSpec,\n  blockConfig,\n  blockService,\n  blockServiceInstance,\n  blockPlugin,\n] as BlockPlugin\nblock.key = blockSpec.key\nblock.pluginKey = blockPlugin.key\n"],"names":["_ctx"],"mappings":";;;;;;;;;;;;;;;;AAEgB,SAAA,SACd,QACA,MACG;AACH,SAAO,OAAO,QAAQ;AAAA,IACpB,MAAM;AAAA,MACJ,SAAS;AAAA,MACT,GAAG;AAAA,IAAA;AAAA,EACL,CACD;AAEM,SAAA;AACT;ACHa,MAAA,oBAAiC,CAAC,QAAQ;AAC/C,QAAA,QAAQ,WAAW,CAAC,SAAS,KAAK,KAAK,SAAS,OAAO,EAAE,GAAG;AAClE,MAAI,MAAc,QAAA;AAEX,SAAA;AACT;AAKO,MAAM,cAAc;AAAA,EACzB,EAAE,aAAa,kBAAkB;AAAA,EACjC;AACF;AAEA,SAAS,aAAa;AAAA,EACpB,aAAa;AACf,CAAC;ACvBe,SAAA,oBACd,MACA,QACA,aACmB;;AACb,QAAA,OAAO,KAAK,IAAI;AAClB,MAAA,CAAC,KAAa,QAAA;AAEd,MAAA;AACI,UAAA,OAAM,UAAK,YAAY;AAAA,MAC3B,MAAM,OAAO;AAAA,MACb,KAAK,OAAO;AAAA,IACb,CAAA,MAHW,mBAGR;AACJ,QAAI,OAAO,QAAQ,MAAM,EAAU,QAAA;AAEnC,QAAI,OAAO,KAAK,MAAM,IAAI,QAAQ,GAAG;AACrC,QAAI,OAAO,KAAK,MAAM,IAAI,OAAO,GAAG;AAChC,QAAA,UAAU,KAAK,QAAQ,GAAG;AAExB,UAAA,SAAS,CAAC,eAAwB;AAChC,YAAA,aAAa,KAAK,SAAS,KAAK,KAAK,MAAM,KAAK,KAAK,MAAM;AACjE,YAAM,eAAe,cAAc;AAEnC,UAAI,CAAC,aAAc;AAEnB,YAAM,cAAc,KAAK,OAAO,KAAK,KAAK;AAC1C,aAAO,KAAK,MAAM,IAAI,OAAO,WAAW;AAC9B,gBAAA,KAAK,QAAQ,WAAW;AAClC,aAAO,KAAK,MAAM,IAAI,QAAQ,WAAW;AAEzC,UAAI,CAAC,YAAY,MAAM,IAAK,UAAU,IAAI;AAAA,IAC5C;AAGM,UAAA,eAAe,YAAY,MAAM,IAAK;AAC5C,WAAO,CAAC,YAAY;AAEpB,QAAI,CAAC,WAAW,CAAC,KAAa,QAAA;AAE9B,WAAO,EAAE,MAAM,MAAM,IAAI,QAAQ;AAAA,EAAA,QAC3B;AACC,WAAA;AAAA,EAAA;AAEX;ACvCA,IAAI,eAAgC;AACpC,SAAS,cAAc;AACrB,SACE,iBACC,eAAe,SAAS,eAAe,mBAAmB,OAAO;AAEtE;AAEA,MAAM,UAAwC;AAAA,EAC5C,OAAO,CAAC,OAAO;AAAA,EACf,OAAO,CAAC,OAAO;AAAA,EACf,OAAO,CAAC,OAAO;AAAA,EACf,SAAS,CAAC,OAAO;AAAA,EACjB,UAAU,CAAC,OAAO;AAAA,EAClB,KAAK,CAAC,SAAS,UAAU;AAAA,EACzB,IAAI,CAAC,SAAS,OAAO;AAAA,EACrB,IAAI,CAAC,SAAS,SAAS,IAAI;AAAA,EAC3B,IAAI,CAAC,SAAS,SAAS,IAAI;AAC7B;AAEgB,SAAA,sBAAsB,MAAkB,OAAc;AACpE,QAAM,UAAU,CAAC;AACjB,MAAI,EAAE,WAAW,SAAS,QAAY,IAAA;AAEpC,SAAA,YAAY,KACZ,UAAU,KACV,QAAQ,eAAe,KACvB,QAAQ,WAAY,eAAe,GACnC;AACa,iBAAA;AACF,eAAA;AACX,UAAM,OAAO,QAAQ;AACb,YAAA;AAAA,MACN,KAAK,KAAK;AAAA,MACV,KAAK,UACF,KAAK,KAA8C,eAClD,KAAK,QACL;AAAA,IACN;AACA,cAAU,KAAK;AAAA,EAAA;AAGX,QAAA,aACJ,KAAK,SAAS,qBAAqB,KACnC,cAAc,WAAW,KAAK,MAAM,MAAM;AAC5C,QAAM,MAAM,YAAY;AAClB,QAAA,OAAO,IAAI,cAAc,KAAK;AAC/B,OAAA,YAAY,WAAW,kBAAkB,SAAS,EAAE,UAAU,IAAA,CAAK,CAAC;AAEzE,MAAI,aAAa,KAAK;AAClB,MAAA;AACJ,MAAI,WAAW;AAEb,SAAA,cACA,WAAW,aAAa,MACvB,YAAY,QAAQ,WAAW,SAAS,YAAY,CAAC,IACtD;AACA,aAAS,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AAC9C,YAAM,UAAU,IAAI,cAAc,UAAU,CAAC,CAAW;AACxD,aAAO,KAAK,WAAoB,SAAA,YAAY,KAAK,UAAU;AAC3D,WAAK,YAAY,OAAO;AACxB;AAAA,IAAA;AAEF,iBAAa,KAAK;AAAA,EAAA;AAGhB,MAAA,cAAc,WAAW,aAAa,GAAG;AACzC,eAA2B;AAAA,MAC3B;AAAA,MACA,GAAG,SAAS,IAAI,OAAO,GAAG,WAAW,KAAK,QAAQ,KAAK,EAAE,IAAI,KAAK,UAAU,OAAO,CAAC;AAAA,IACtF;AAAA,EAAA;AAGF,QAAM,OACJ,KAAK,SAAS,2BAA2B,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,KAC9D,MAAM,QAAQ,YAAY,GAAG,MAAM,QAAQ,MAAM,MAAM;AAElD,SAAA,EAAE,KAAK,MAAM,KAAK;AAC3B;ACvEA,MAAM,qBACH,QAAQ,MAAc,QAAQ,aAAa,MAC3C,QAAQ,OAAO,QAAQ,iBAAiB;AAE3C,MAAM,SAAS;AAkBR,MAAM,aAAa;AAAA,EAAnB,cAAA;AAAA;AAEL;AAAA;AAGA;AAmBA;AAEA;AAEA;AAGA;AAaA;AAAA;AAGA;AAMA;AA+BA;AAMA;AAcA;AAsCA;AAkGA;AA3OA,uBAAA,kBAA2C,MAAM;AAC3C,UAAA,CAAC,mBAAK,SAAgB,QAAA;AAC1B,YAAM,SAAS,mBAAK;AACpB,YAAM,OAAO,mBAAK;AAElB,UAAI,QAAQ,cAAc,aAAa,OAAO,IAAI,GAAG;AACnD,cAAM,gBAAgB,cAAc;AAAA,UAClC,KAAK,MAAM;AAAA,UACX,OAAO,KAAK;AAAA,QACd;AACA,aAAK,SAAS,KAAK,MAAM,GAAG,aAAa,aAAa,CAAC;AACvD,aAAK,MAAM;AACX,2BAAK,kBAAmB;AACjB,eAAA;AAAA,MAAA;AAEF,aAAA;AAAA,IACT;AAGqC,uBAAA,kBAAA;AAER,uBAAA,SAAA;AAES,uBAAA,gBAAA;AAG1B,uBAAA,WAAA;AAgBZ,uBAAA,OAAQ,MAAM;;AACZ,+BAAK,aAAL,8BAAe,EAAE,MAAM,OAAA;AACvB,yBAAK,SAAU;AAAA,IACjB;AAGA,uBAAA,OAAQ,CAAC,WAAuB;;AAC9B,yBAAK,SAAU;AACf,+BAAK,aAAL,8BAAe,EAAE,MAAM,QAAQ;IACjC;AAGO,SAAA,OAAA,CAAC,KAAU,WAAgC;AAChD,yBAAK,MAAO;AACZ,yBAAK,SAAU;AAAA,IACjB;AAGA,SAAA,WAAW,CAAC,QAAqB;AAC3B,UAAA,iBAAiB,aAAa,mBAAK,iBAAgB;AACnD,UAAA,iBAAiB,WAAW,mBAAK,eAAc;AAC/C,UAAA,iBAAiB,aAAa,mBAAK,iBAAgB;AAAA,IACzD;AAGA,SAAA,cAAc,CAAC,QAAqB;AAC9B,UAAA,oBAAoB,aAAa,mBAAK,iBAAgB;AACtD,UAAA,oBAAoB,WAAW,mBAAK,eAAc;AAClD,UAAA,oBAAoB,aAAa,mBAAK,iBAAgB;AAAA,IAC5D;AAGA,SAAA,SAAS,MAAM;AACb,yBAAK,SAAU;AAAA,IACjB;AAGA,uBAAA,kBAAmB,MAAM;;AACvB,yBAAK,iBAAiB,wBAAK,aAAL,mBAAc,GAAG;AACvC,yBAAK,kBAAL;AAAA,IACF;AAGA,uBAAA,gBAAiB,MAAM;AACjB,UAAA,CAAC,mBAAK,YAAW;AACnB,8BAAsB,MAAM;;AACtB,cAAA,CAAC,mBAAK,gBAAgB;AAC1B,mCAAK,uCAAL,mBAAY;AAAA,QAAM,CACnB;AAED;AAAA,MAAA;AAEF,yBAAK,WAAY;AACjB,yBAAK,kBAAmB;AAAA,IAC1B;AAGA,uBAAA,kBAAmB,CAAC,UAAqB;;AACvC,yBAAK,WAAY;AAEjB,YAAM,OAAO,mBAAK;AAClB,UAAI,CAAC,KAAM;AACN,WAAA,IAAI,QAAQ,WAAW;AAE5B,YAAM,YAAY,mBAAK;AACnB,UAAA,MAAM,gBAAgB,WAAW;AAC7B,cAAA,QAAQ,UAAU,QAAQ;AAChC,cAAM,aAAa,gBAAgB;AACnC,cAAM,EAAE,KAAK,KAAA,IAAS,sBAAsB,MAAM,KAAK;AACvD,cAAM,aAAa,UAAU;AAC7B,cAAM,aAAa;AAAA,UACjB,qBAAqB,SAAS;AAAA,UAC9B,IAAI;AAAA,QACN;AACA,YAAI,CAAC,mBAAoB,OAAM,aAAa,QAAQ,cAAc,IAAI;AAChE,cAAA,YAAW,wBAAK,aAAL,mBAAc;AAC/B,YAAI,SAAgB,OAAA,aAAa,aAAa,UAAU,GAAG,CAAC;AAE5D,aAAK,WAAW;AAAA,UACd;AAAA,UACA,MAAM;AAAA,QACR;AAAA,MAAA;AAAA,IAEJ;AAGA,SAAA,kBAAkB,CAAC,SAAqB;AACtC,yBAAK,OAAL;AAEA,yBAAK,WAAY;AACZ,WAAA,IAAI,QAAQ,WAAW;AACrB,aAAA;AAAA,IACT;AAGqB,uBAAA,oBAAA,SAAS,CAAC,MAAkB,UAAsB;AACjE,UAAA,CAAC,KAAK,SAAU;AAEd,YAAA,OAAO,KAAK,IAAI,sBAAsB;AAC5C,YAAM,IAAI,KAAK,OAAO,KAAK,QAAQ;AACnC,YAAM,MAAM,KAAK,KAAK,iBAAiB,GAAG,MAAM,OAAO;AACnD,UAAA,EAAE,eAAe,UAAU;AAC7B,2BAAK,OAAL;AACA;AAAA,MAAA;AAGF,YAAM,cAAc,mBAAK;AACzB,UAAI,CAAC,YAAa;AAElB,YAAM,SAAS;AAAA,QACb;AAAA,QACA,EAAE,GAAG,GAAG,MAAM,QAAQ;AAAA,QACtB;AAAA,MACF;AAEA,UAAI,CAAC,QAAQ;AACX,2BAAK,OAAL;AACA;AAAA,MAAA;AAEF,yBAAK,OAAL,WAAW;AAAA,OACV,GAAG;AAGc,SAAA,oBAAA,CAAC,MAAkB,UAAsB;AAC3D,UAAI,KAAK,aAAa,CAAC,KAAK,SAAiB,QAAA;AAExC,yBAAA,oBAAA,WAAmB,MAAM;AAEvB,aAAA;AAAA,IACT;AAGmB,SAAA,mBAAA,CAAC,MAAkB,UAAqB;;AACzD,UAAI,mBAAK,YAAW;AACZ,cAAA,QAAO,wBAAK,uCAAL,mBAAY,IAAI;AACzB,YAAA,CAAC,KAAa,QAAA;AAEZ,cAAA,yBAAyB,KAAK,eAAe,KAAK;AAElD,cAAA,WAAW,KAAK,sBAAsB;AAC5C,YAAI,wBAAwB;AACtB,cAAA,KAAK,YAAY,KAAK,KAAK,IAAI,MAAM,IAAI,SAAS,CAAC,IAAI,QAAQ;AACjE,kBAAM,MAAM,KAAK,YAAY,KAAK,KAAK,YAAY,KAAK;AACxD,iBAAK,YAAY;AACV,mBAAA;AAAA,UAAA;AAET,gBAAM,cAAc,KAAK,MAAM,KAAK,IAAI,wBAAwB,MAAM;AACtE,gBAAM,eAAe,KAAK,MAAM,KAAK,YAAY,SAAS,MAAM;AAE9D,cAAA,eAAe,eACf,KAAK,IAAI,MAAM,KAAK,SAAS,SAAS,SAAS,EAAE,IAAI,QACrD;AACM,kBAAA,MAAM,KAAK,YAAY;AAC7B,iBAAK,YAAY;AACV,mBAAA;AAAA,UAAA;AAAA,QACT;AAAA,MACF;AAEK,aAAA;AAAA,IACT;AAGA,SAAA,oBAAoB,CAAC,SAAqB;AACpC,UAAA,CAAC,KAAK,SAAU;AAEpB,yBAAK,WAAY;AACZ,WAAA,IAAI,QAAQ,WAAW;AAAA,IAC9B;AAGoB,SAAA,oBAAA,CAAC,MAAkB,UAAqB;AAC1D,YAAM,IAAI,MAAM;AAChB,YAAM,IAAI,MAAM;AAEZ,UAAA,IAAI,KAAK,IAAI,KAAK,IAAI,OAAO,cAAc,IAAI,OAAO,aAAa;AACrE,2BAAK,SAAU;AACf,2BAAK,UAAL,WAAc;AAAA,MAAI;AAAA,IAEtB;AAGA,SAAA,eAAe,CAAC,SAAqB;AACnC,yBAAK,UAAL,WAAc;AAEP,aAAA;AAAA,IACT;AAGA,SAAA,kBAAkB,CAAC,SAAqB;AACtC,yBAAK,UAAL,WAAc;AAAA,IAChB;AAGA,uBAAA,UAAW,CAAC,SAAqB;AAC/B,yBAAK,WAAY;AACZ,WAAA,IAAI,QAAQ,WAAW;AAAA,IAC9B;AAAA,EAAA;AACF;AAlPE;AAGA;AAmBA;AAEA;AAEA;AAGA;AA/BK;AAkCD,kBAAwC,WAAA;;AAC1C,UAAO,wBAAK,UAAL,mBAAW,IAAI,YAAY,KAAK;AAAA;AAIrC,WAAQ,WAAA;;AACH,UAAA,wBAAK,UAAL,mBAAW,IAAI;AAAa;AAIrC;AAGA;AAMA;AA+BA;AAMA;AAcA;AAsCA;AAkGA;AC7QK,MAAM,eAAe,KAAK,MAAM,IAAI,gBAAgB,cAAc;AAGlE,MAAM,uBAAuB;AAAA,EAClC,CAAC;AAAA,EACD;AACF;AAEA,SAAS,cAAc;AAAA,EACrB,aAAa;AACf,CAAC;AAED,SAAS,sBAAsB;AAAA,EAC7B,aAAa;AACf,CAAC;AAIM,MAAM,YAAY,KAAmC,CAAA,GAAI,WAAW;AAE3E,SAAS,WAAW;AAAA,EAClB,aAAa;AACf,CAAC;AAGY,MAAA,cAAc,OAAO,CAAC,QAAQ;AACnC,QAAA,yBAAyB,IAAI,UAAU,gBAAgB;AAC7D,QAAM,aAAa,IAAI,IAAI,aAAa,GAAG;AAC3C,QAAM,UAAU,WAAW;AACvB,MAAA,IAAI,qBAAqB,KAAK,OAAO;AACzC,QAAM,OAAO,IAAI,IAAI,UAAU,GAAG;AAElC,SAAO,IAAI,OAAO;AAAA,IAChB,KAAK;AAAA,IACL,GAAG;AAAA,IACH,OAAO;AAAA,MACL,GAAG,KAAK;AAAA,MACR,iBAAiB;AAAA,QACf,MAAM,CAAC,SAAS;AACP,iBAAA,QAAQ,aAAa,IAAI;AAAA,QAClC;AAAA,QACA,aAAa,CAAC,MAAM,UAAU;AACrB,iBAAA,QAAQ,kBAAkB,MAAM,KAAK;AAAA,QAC9C;AAAA,QACA,SAAS,CAAC,SAAS;AACV,iBAAA,QAAQ,gBAAgB,IAAI;AAAA,QACrC;AAAA,QACA,UAAU,CAAC,MAAM,UAAU;AAClB,iBAAA,QAAQ,iBAAiB,MAAM,KAAK;AAAA,QAC7C;AAAA,QACA,WAAW,CAAC,MAAM,UAAU;AACnB,iBAAA,QAAQ,kBAAkB,MAAM,KAAK;AAAA,QAC9C;AAAA,QACA,WAAW,CAAC,SAAS;AACZ,iBAAA,QAAQ,kBAAkB,IAAI;AAAA,QACvC;AAAA,QACA,SAAS,CAAC,SAAS;AACV,iBAAA,QAAQ,gBAAgB,IAAI;AAAA,QAAA;AAAA,MACrC;AAAA,IACF;AAAA,EACF,CACD;AACH,CAAC;AAED,SAAS,aAAa;AAAA,EACpB,aAAa;AACf,CAAC;ACzBM,MAAM,cAAc;AAAA,EAyCzB,YAAY,SAA+B;AAzCtC;AAEI;AAAA;AAGA;AAAA,uBAAAA;AAGT;AAAA;AAGA;AAGS;AAAA;AAGT;AAGS;AAAA;AAGA;AAAA;AAGA;AAAA;AAGA;AAAA;AAKA;AAAA;AAvBwB,uBAAA,aAAA;AAMlB,uBAAA,cAAA;AA2Df,SAAA,SAAS,MAAY;AACnB,4BAAsB,MAAM;AACtB,YAAA,CAAC,mBAAK,eAAc;AAClB,cAAA;AACF,kCAAK,mCAAL;AACA,+BAAK,cAAe;AAAA,UAAA,QACd;AAAA,UAAA;AAAA,QAER;AAAA,MACF,CACD;AAAA,IACH;AAGA,SAAA,UAAU,MAAM;;AACd,+BAAK,cAAL,mBAAe;AACV,+BAAA,cAAA,mBAAU,YAAY,mBAAK;AAChC,yBAAK,UAAS,OAAO;AAAA,IACvB;AAGA,SAAA,OAAO,CAAC,WAAuB;AAC7B,YAAM,MAAM,OAAO;AACnB,YAAM,YAAY,mBAAKA,OAAK,IAAI,aAAa,EAAE;AAC/C,YAAM,gBAA+B;AAAA,QACnC,KAAK,mBAAKA;AAAA,QACV;AAAA,QACA;AAAA,QACA,UAAU,mBAAK;AAAA,MACjB;AACA,YAAM,YAA4B;AAAA,QAChC,gBAAgB;AAAA,QAChB,uBAAuB,MAAM;AAC3B,cAAI,mBAAK,cAAqB,QAAA,mBAAK,cAAL,WAAkB;AAEhD,iBAAO,IAAI,sBAAsB;AAAA,QAAA;AAAA,MAErC;AACM,YAAA,aAAa,CAAC,MAAM;AAC1B,UAAI,mBAAK,aAAY;AACb,cAAA,eAAe,mBAAK,YAAL,WAAgB;AAC/B,cAAA,YAAY,OAAO,YAAY;AACrC,mBAAW,KAAK,SAAS;AAAA,MAAA;AAGX,sBAAA,WAAW,mBAAK,WAAU;AAAA,QACxC,WAAW,mBAAK,iBACZ,mBAAK,eAAL,WAAmB,iBACnB;AAAA,QACJ,YAAY,CAAC,GAAG,YAAY,GAAG,mBAAK,YAAW;AAAA,QAC/C,GAAG,mBAAK;AAAA,MACT,CAAA,EACE,KAAK,CAAC,EAAE,GAAG,QAAQ;AACX,eAAA,OAAO,mBAAK,UAAS,OAAO;AAAA,UACjC,MAAM,GAAG,CAAC;AAAA,UACV,KAAK,GAAG,CAAC;AAAA,QAAA,CACV;AACI,2BAAA,UAAS,QAAQ,OAAO;AAAA,MAAA,CAC9B,EACA,MAAM,QAAQ,KAAK;AAAA,IACxB;AAGA,SAAA,OAAO,MAAM;AACN,yBAAA,UAAS,QAAQ,OAAO;AAAA,IAC/B;AAnGE,uBAAKA,OAAO,QAAQ;AACpB,uBAAK,UAAW,QAAQ;AACxB,uBAAK,YAAa,QAAQ;AAC1B,uBAAK,cAAe,QAAQ;AAC5B,uBAAK,eAAgB,QAAQ;AACxB,uBAAA,aAAc,QAAQ,cAAc,CAAC;AACrC,uBAAA,oBAAqB,QAAQ,qBAAqB,CAAC;AACxD,uBAAK,OAAQ,QAAQ;AACrB,SAAK,KAAK;AAAA,EAAA;AAAA;AAAA,EAbZ,IAAI,SAAS;AACX,WAAO,mBAAK;AAAA,EAAA;AAwGhB;AA5IW;AAGAA,QAAA;AAGT;AAGA;AAGS;AAGT;AAGS;AAGA;AAGA;AAGA;AAKA;AAlCJ;AAAA;AAsDL,UAAQ,WAAA;AACN,QAAM,OAAO,mBAAKA,OAAK,IAAI,aAAa;AACxC,QAAM,OAAO,mBAAK,UAAS,KAAK,IAAI,iBAAiB,SAAS;AACzD,OAAA,YAAY,mBAAK,SAAQ;AAE9B,QAAM,UAAU,mBAAKA,OAAK,IAAI,qBAAqB,GAAG;AACtD,UAAQ,KAAK,mBAAKA,QAAM,CAAC,YAAY;AAC/B,QAAA,QAAQ,SAAS,QAAQ;AAC3B,WAAK,KAAK;AACV,yBAAK,aAAc;AAAA,IAAA,WACV,QAAQ,SAAS,QAAQ;AAC7B,WAAA,KAAK,QAAQ,MAAM;AACxB,yBAAK,aAAc,QAAQ;AAAA,IAAA;AAAA,EAC7B,CACD;AAED,qBAAK,UAAW;AACX,qBAAA,UAAS,SAAS,mBAAK,SAAQ;AACpC,qBAAK,UAAS,YAAY;AAAA;ACxFvB,MAAM,QAAQ;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AACA,MAAM,MAAM,UAAU;AACtB,MAAM,YAAY,YAAY;"}