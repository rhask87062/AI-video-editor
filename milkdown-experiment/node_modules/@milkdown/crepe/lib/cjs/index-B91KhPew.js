'use strict';

var prose = require('@milkdown/kit/prose');
var state = require('@milkdown/kit/prose/state');
var view = require('@milkdown/kit/prose/view');
var utils = require('@milkdown/kit/utils');
var index = require('./index-xbwf60wt.js');

function isDocEmpty(doc) {
  var _a;
  return doc.childCount <= 1 && !((_a = doc.firstChild) == null ? void 0 : _a.content.size);
}
function createPlaceholderDecoration(state, placeholderText) {
  const { selection } = state;
  if (!selection.empty) return null;
  const $pos = selection.$anchor;
  const node = $pos.parent;
  if (node.content.size > 0) return null;
  const inTable = prose.findParent((node2) => node2.type.name === "table")($pos);
  if (inTable) return null;
  const before = $pos.before();
  return view.Decoration.node(before, before + node.nodeSize, {
    class: "crepe-placeholder",
    "data-placeholder": placeholderText
  });
}
const placeholderConfig = utils.$ctx(
  {
    text: "Please enter...",
    mode: "block"
  },
  "placeholderConfigCtx"
);
const placeholderPlugin = utils.$prose((ctx) => {
  return new state.Plugin({
    key: new state.PluginKey("CREPE_PLACEHOLDER"),
    props: {
      decorations: (state) => {
        var _a;
        const config = ctx.get(placeholderConfig.key);
        if (config.mode === "doc" && !isDocEmpty(state.doc)) return null;
        if (index.isInCodeBlock(state.selection) || index.isInList(state.selection))
          return null;
        const placeholderText = (_a = config.text) != null ? _a : "Please enter...";
        const deco = createPlaceholderDecoration(state, placeholderText);
        if (!deco) return null;
        return view.DecorationSet.create(state.doc, [deco]);
      }
    }
  });
});
const defineFeature = (editor, config) => {
  editor.config((ctx) => {
    if (config) {
      ctx.update(placeholderConfig.key, (prev) => {
        return {
          ...prev,
          ...config
        };
      });
    }
  }).use(placeholderPlugin).use(placeholderConfig);
};

exports.defineFeature = defineFeature;
exports.placeholderConfig = placeholderConfig;
exports.placeholderPlugin = placeholderPlugin;
//# sourceMappingURL=index-B91KhPew.js.map
