{"version":3,"file":"index.js","sources":["../src/default-uploader.ts","../src/upload.ts","../src/index.ts"],"sourcesContent":["import type { Node } from '@milkdown/prose/model'\n\nimport { missingNodeInSchema } from '@milkdown/exception'\n\nimport type { Uploader } from './upload'\n\n/// Read the image file as base64.\nexport function readImageAsBase64(\n  file: File\n): Promise<{ alt: string; src: string }> {\n  return new Promise((resolve) => {\n    const reader = new FileReader()\n    reader.addEventListener(\n      'load',\n      () => {\n        resolve({\n          alt: file.name,\n          src: reader.result as string,\n        })\n      },\n      false\n    )\n    reader.readAsDataURL(file)\n  })\n}\n\n/// The default uploader.\n/// It will upload transform images to base64.\nexport const defaultUploader: Uploader = async (files, schema) => {\n  const imgs: File[] = []\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files.item(i)\n    if (!file) continue\n\n    if (!file.type.includes('image')) continue\n\n    imgs.push(file)\n  }\n\n  const { image } = schema.nodes\n  if (!image) throw missingNodeInSchema('image')\n\n  const data = await Promise.all(imgs.map((img) => readImageAsBase64(img)))\n\n  return data.map(({ alt, src }) => image.createAndFill({ src, alt }) as Node)\n}\n","import type { Fragment, Node, Schema } from '@milkdown/prose/model'\nimport type { EditorState } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\n\nimport { schemaCtx } from '@milkdown/core'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { Decoration, DecorationSet } from '@milkdown/prose/view'\nimport { $ctx, $prose } from '@milkdown/utils'\n\nimport { defaultUploader } from './default-uploader'\n\n/// @internal\nexport type Uploader = UploadOptions['uploader']\ninterface Spec {\n  id: symbol\n  pos: number\n}\n\n/// The configuration for upload.\nexport interface UploadOptions {\n  /// The uploader for upload plugin.\n  /// It takes the files and schema as parameters.\n  /// It should return a `Promise` of Prosemirror `Fragment` or `Node` or `Node[]`.\n  uploader: (\n    files: FileList,\n    schema: Schema\n  ) => Promise<Fragment | Node | Node[]>\n  /// Whether to enable the html file uploader.\n  /// When paste files from html (for example copy images by right click context menu),\n  /// this option will make the plugin to upload the image copied instead of using the original link.\n  enableHtmlFileUploader: boolean\n  /// The factory for upload widget.\n  /// The widget will be displayed when the file is uploading.\n  /// It takes the position and spec as parameters.\n  /// It should return a `Decoration` of Prosemirror.\n  /// By default, it will return `<span>Upload in progress...</span>`.\n  uploadWidgetFactory: (\n    pos: number,\n    spec: Parameters<typeof Decoration.widget>[2]\n  ) => Decoration\n}\n\n/// A slice that contains the configuration for upload.\n/// It should be typed of `UploadConfig`.\nexport const uploadConfig = $ctx<UploadOptions, 'uploadConfig'>(\n  {\n    uploader: defaultUploader,\n    enableHtmlFileUploader: false,\n    uploadWidgetFactory: (pos, spec) => {\n      const widgetDOM = document.createElement('span')\n      widgetDOM.textContent = 'Upload in progress...'\n      return Decoration.widget(pos, widgetDOM, spec)\n    },\n  },\n  'uploadConfig'\n)\n\nuploadConfig.meta = {\n  package: '@milkdown/plugin-upload',\n  displayName: 'Ctx<uploadConfig>',\n}\n\n/// The prosemirror plugin for upload.\nexport const uploadPlugin = $prose((ctx) => {\n  const pluginKey = new PluginKey('MILKDOWN_UPLOAD')\n\n  const findPlaceholder = (state: EditorState, id: symbol): number => {\n    const decorations = pluginKey.getState(state)\n    if (!decorations) return -1\n    const found = decorations.find(\n      undefined,\n      undefined,\n      (spec: Spec) => spec.id === id\n    )\n    if (!found.length) return -1\n    return found[0]?.from ?? -1\n  }\n\n  const handleUpload = (\n    view: EditorView,\n    event: DragEvent | ClipboardEvent,\n    files: FileList | undefined\n  ) => {\n    if (!files || files.length <= 0) return false\n\n    const id = Symbol('upload symbol')\n    const schema = ctx.get(schemaCtx)\n    const { tr } = view.state\n    const insertPos =\n      event instanceof DragEvent\n        ? (view.posAtCoords({ left: event.clientX, top: event.clientY })?.pos ??\n          tr.selection.from)\n        : tr.selection.from\n    view.dispatch(tr.setMeta(pluginKey, { add: { id, pos: insertPos } }))\n\n    const { uploader } = ctx.get(uploadConfig.key)\n    uploader(files, schema)\n      .then((fragment) => {\n        const pos = findPlaceholder(view.state, id)\n        if (pos < 0) return\n\n        view.dispatch(\n          view.state.tr\n            .replaceWith(pos, pos, fragment)\n            .setMeta(pluginKey, { remove: { id } })\n        )\n      })\n      .catch((e) => {\n        console.error(e)\n      })\n    return true\n  }\n\n  return new Plugin({\n    key: pluginKey,\n    state: {\n      init() {\n        return DecorationSet.empty\n      },\n      apply(this: Plugin, tr, set) {\n        const _set = set.map(tr.mapping, tr.doc)\n        const action = tr.getMeta(this)\n        if (!action) return _set\n\n        if (action.add) {\n          const { uploadWidgetFactory } = ctx.get(uploadConfig.key)\n\n          const decoration = uploadWidgetFactory(action.add.pos, {\n            id: action.add.id,\n          })\n          return _set.add(tr.doc, [decoration])\n        }\n        if (action.remove) {\n          const target = _set.find(\n            undefined,\n            undefined,\n            (spec: Spec) => spec.id === action.remove.id\n          )\n          return _set.remove(target)\n        }\n\n        return _set\n      },\n    },\n    props: {\n      decorations(this: Plugin, state) {\n        return this.getState(state)\n      },\n      handlePaste: (view, event) => {\n        const { enableHtmlFileUploader } = ctx.get(uploadConfig.key)\n        if (!(event instanceof ClipboardEvent)) return false\n\n        if (\n          !enableHtmlFileUploader &&\n          event.clipboardData?.getData('text/html')\n        )\n          return false\n\n        return handleUpload(view, event, event.clipboardData?.files)\n      },\n      handleDrop: (view, event) => {\n        if (!(event instanceof DragEvent)) return false\n\n        return handleUpload(view, event, event.dataTransfer?.files)\n      },\n    },\n  })\n})\n\nuploadPlugin.meta = {\n  package: '@milkdown/plugin-upload',\n  displayName: 'Prose<upload>',\n}\n","import type { MilkdownPlugin } from '@milkdown/ctx'\n\nimport { uploadConfig, uploadPlugin } from './upload'\n\nexport * from './upload'\nexport * from './default-uploader'\n\n/// All plugins exported by this package.\nexport const upload: MilkdownPlugin[] = [uploadConfig, uploadPlugin]\n"],"names":[],"mappings":"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"}