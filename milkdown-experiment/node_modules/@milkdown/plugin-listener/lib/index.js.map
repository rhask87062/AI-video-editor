{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { Node as ProseNode } from '@milkdown/prose/model'\n\nimport {\n  EditorViewReady,\n  InitReady,\n  SerializerReady,\n  prosePluginsCtx,\n  serializerCtx,\n} from '@milkdown/core'\nimport { createSlice } from '@milkdown/ctx'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport debounce from 'lodash.debounce'\n\n/// The dictionary of subscribers of each event.\nexport interface Subscribers {\n  beforeMount: ((ctx: Ctx) => void)[]\n  mounted: ((ctx: Ctx) => void)[]\n  updated: ((ctx: Ctx, doc: ProseNode, prevDoc: ProseNode) => void)[]\n  markdownUpdated: ((\n    ctx: Ctx,\n    markdown: string,\n    prevMarkdown: string\n  ) => void)[]\n  blur: ((ctx: Ctx) => void)[]\n  focus: ((ctx: Ctx) => void)[]\n  destroy: ((ctx: Ctx) => void)[]\n}\n\n/// The manager of listeners. It provides methods to subscribe to events.\nexport class ListenerManager {\n  private beforeMountedListeners: Array<(ctx: Ctx) => void> = []\n  private mountedListeners: Array<(ctx: Ctx) => void> = []\n  private updatedListeners: Array<\n    (ctx: Ctx, doc: ProseNode, prevDoc: ProseNode) => void\n  > = []\n  private markdownUpdatedListeners: Array<\n    (ctx: Ctx, markdown: string, prevMarkdown: string) => void\n  > = []\n  private blurListeners: Array<(ctx: Ctx) => void> = []\n  private focusListeners: Array<(ctx: Ctx) => void> = []\n  private destroyListeners: Array<(ctx: Ctx) => void> = []\n\n  /// A getter to get all [subscribers](#interface-subscribers). You should not use this method directly.\n  get listeners(): Subscribers {\n    return {\n      beforeMount: this.beforeMountedListeners,\n      mounted: this.mountedListeners,\n      updated: this.updatedListeners,\n      markdownUpdated: this.markdownUpdatedListeners,\n      blur: this.blurListeners,\n      focus: this.focusListeners,\n      destroy: this.destroyListeners,\n    }\n  }\n\n  /// Subscribe to the beforeMount event.\n  /// This event will be triggered before the editor is mounted.\n  beforeMount = (fn: (ctx: Ctx) => void) => {\n    this.beforeMountedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the mounted event.\n  /// This event will be triggered after the editor is mounted.\n  mounted = (fn: (ctx: Ctx) => void) => {\n    this.mountedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the updated event.\n  /// This event will be triggered after the editor state is updated and **the document is changed**.\n  /// The second parameter is the current document and the third parameter is the previous document.\n  updated = (\n    fn: (ctx: Ctx, doc: ProseNode, prevDoc: ProseNode | null) => void\n  ) => {\n    this.updatedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the markdownUpdated event.\n  /// This event will be triggered after the editor state is updated and **the document is changed**.\n  /// The second parameter is the current markdown and the third parameter is the previous markdown.\n  markdownUpdated(\n    fn: (ctx: Ctx, markdown: string, prevMarkdown: string) => void\n  ) {\n    this.markdownUpdatedListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the blur event.\n  /// This event will be triggered when the editor is blurred.\n  blur(fn: (ctx: Ctx) => void) {\n    this.blurListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the focus event.\n  /// This event will be triggered when the editor is focused.\n  focus(fn: (ctx: Ctx) => void) {\n    this.focusListeners.push(fn)\n    return this\n  }\n\n  /// Subscribe to the destroy event.\n  /// This event will be triggered before the editor is destroyed.\n  destroy(fn: (ctx: Ctx) => void) {\n    this.destroyListeners.push(fn)\n    return this\n  }\n}\n\n/// The ctx key of the listener manager.\n/// You can use `ctx.get(listenerCtx)` to get the [listener manager](#class-listenermanager).\nexport const listenerCtx = createSlice<ListenerManager>(\n  new ListenerManager(),\n  'listener'\n)\n\n/// The plugin key of the listener prosemirror plugin.\nexport const key = new PluginKey('MILKDOWN_LISTENER')\n\n/// The listener plugin.\nexport const listener: MilkdownPlugin = (ctx) => {\n  ctx.inject(listenerCtx, new ListenerManager())\n\n  return async () => {\n    await ctx.wait(InitReady)\n    const listener = ctx.get(listenerCtx)\n    const { listeners } = listener\n\n    listeners.beforeMount.forEach((fn) => fn(ctx))\n\n    await ctx.wait(SerializerReady)\n    const serializer = ctx.get(serializerCtx)\n\n    let prevDoc: ProseNode | null = null\n    let prevMarkdown: string | null = null\n\n    const plugin = new Plugin({\n      key,\n      view: () => {\n        return {\n          destroy: () => {\n            listeners.destroy.forEach((fn) => fn(ctx))\n          },\n        }\n      },\n      props: {\n        handleDOMEvents: {\n          focus: () => {\n            listeners.focus.forEach((fn) => fn(ctx))\n            return false\n          },\n          blur: () => {\n            listeners.blur.forEach((fn) => fn(ctx))\n            return false\n          },\n        },\n      },\n      state: {\n        init: (_, instance) => {\n          prevDoc = instance.doc\n          prevMarkdown = serializer(instance.doc)\n        },\n        apply: (tr) => {\n          if (!tr.docChanged || tr.getMeta('addToHistory') === false) return\n\n          const handler = debounce(() => {\n            const { doc } = tr\n            if (listeners.updated.length > 0 && prevDoc && !prevDoc.eq(doc)) {\n              listeners.updated.forEach((fn) => {\n                fn(ctx, doc, prevDoc!)\n              })\n            }\n\n            if (\n              listeners.markdownUpdated.length > 0 &&\n              prevDoc &&\n              !prevDoc.eq(doc)\n            ) {\n              const markdown = serializer(doc)\n              listeners.markdownUpdated.forEach((fn) => {\n                fn(ctx, markdown, prevMarkdown!)\n              })\n              prevMarkdown = markdown\n            }\n\n            prevDoc = doc\n          }, 200)\n\n          return handler()\n        },\n      },\n    })\n    ctx.update(prosePluginsCtx, (x) => x.concat(plugin))\n\n    await ctx.wait(EditorViewReady)\n    listeners.mounted.forEach((fn) => fn(ctx))\n  }\n}\n\nlistener.meta = {\n  package: '@milkdown/plugin-listener',\n  displayName: 'Listener',\n}\n"],"names":["listener"],"mappings":"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"}