{"version":3,"file":"index.js","sources":["../src/tooltip-provider.ts","../src/tooltip-plugin.ts"],"sourcesContent":["import type {\n  ComputePositionConfig,\n  Middleware,\n  OffsetOptions,\n  ShiftOptions,\n  VirtualElement,\n} from '@floating-ui/dom'\nimport type { EditorState } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\n\nimport { computePosition, flip, offset, shift } from '@floating-ui/dom'\nimport { posToDOMRect } from '@milkdown/prose'\nimport { TextSelection } from '@milkdown/prose/state'\nimport throttle from 'lodash.throttle'\n\n/// Options for tooltip provider.\nexport interface TooltipProviderOptions {\n  /// The tooltip content.\n  content: HTMLElement\n  /// The debounce time for updating tooltip, 200ms by default.\n  debounce?: number\n  /// The function to determine whether the tooltip should be shown.\n  shouldShow?: (view: EditorView, prevState?: EditorState) => boolean\n  /// The offset to get the block. Default is 0.\n  offset?: OffsetOptions\n  /// The amount to shift options the block by.\n  shift?: ShiftOptions\n  /// Other middlewares for floating ui. This will be added after the internal middlewares.\n  middleware?: Middleware[]\n  /// Options for floating ui. If you pass `middleware` or `placement`, it will override the internal settings.\n  floatingUIOptions?: Partial<ComputePositionConfig>\n  /// The root element that the tooltip will be appended to.\n  root?: HTMLElement\n}\n\n/// A provider for creating tooltip.\nexport class TooltipProvider {\n  /// @internal\n  readonly #debounce: number\n\n  /// @internal\n  readonly #shouldShow: (view: EditorView, prevState?: EditorState) => boolean\n\n  /// @internal\n  readonly #middleware: Middleware[]\n\n  /// @internal\n  readonly #floatingUIOptions: Partial<ComputePositionConfig>\n\n  /// @internal\n  readonly #root?: HTMLElement\n\n  /// @internal\n  #initialized = false\n\n  /// @internal\n  readonly #offset?: OffsetOptions\n\n  /// @internal\n  readonly #shift?: ShiftOptions\n\n  /// The root element of the tooltip.\n  element: HTMLElement\n\n  /// On show callback.\n  onShow = () => {}\n\n  /// On hide callback.\n  onHide = () => {}\n\n  constructor(options: TooltipProviderOptions) {\n    this.element = options.content\n    this.#debounce = options.debounce ?? 200\n    this.#shouldShow = options.shouldShow ?? this.#_shouldShow\n    this.#offset = options.offset\n    this.#shift = options.shift\n    this.#middleware = options.middleware ?? []\n    this.#floatingUIOptions = options.floatingUIOptions ?? {}\n    this.#root = options.root\n    this.element.dataset.show = 'false'\n  }\n\n  /// @internal\n  #onUpdate = (view: EditorView, prevState?: EditorState): void => {\n    const { state, composing } = view\n    const { selection, doc } = state\n    const { ranges } = selection\n    const from = Math.min(...ranges.map((range) => range.$from.pos))\n    const to = Math.max(...ranges.map((range) => range.$to.pos))\n    const isSame =\n      prevState && prevState.doc.eq(doc) && prevState.selection.eq(selection)\n\n    if (!this.#initialized) {\n      const root = this.#root ?? view.dom.parentElement ?? document.body\n      root.appendChild(this.element)\n      this.#initialized = true\n    }\n\n    if (composing || isSame) return\n\n    if (!this.#shouldShow(view, prevState)) {\n      this.hide()\n      return\n    }\n\n    const virtualEl: VirtualElement = {\n      getBoundingClientRect: () => posToDOMRect(view, from, to),\n    }\n    computePosition(virtualEl, this.element, {\n      placement: this.#floatingUIOptions.placement ?? 'top',\n      middleware: [\n        flip(),\n        offset(this.#offset),\n        shift(this.#shift),\n        ...this.#middleware,\n      ],\n    })\n      .then(({ x, y }) => {\n        Object.assign(this.element.style, {\n          left: `${x}px`,\n          top: `${y}px`,\n        })\n      })\n      .catch(console.error)\n\n    this.show()\n  }\n\n  /// Update provider state by editor view.\n  update = (view: EditorView, prevState?: EditorState): void => {\n    const updater = throttle(this.#onUpdate, this.#debounce)\n\n    updater(view, prevState)\n  }\n\n  /// @internal\n  #_shouldShow(view: EditorView): boolean {\n    const { doc, selection } = view.state\n    const { empty, from, to } = selection\n\n    const isEmptyTextBlock =\n      !doc.textBetween(from, to).length &&\n      view.state.selection instanceof TextSelection\n\n    const isTooltipChildren = this.element.contains(document.activeElement)\n\n    const notHasFocus = !view.hasFocus() && !isTooltipChildren\n\n    const isReadonly = !view.editable\n\n    if (notHasFocus || empty || isEmptyTextBlock || isReadonly) return false\n\n    return true\n  }\n\n  /// Destroy the tooltip.\n  destroy = () => {}\n\n  /// Show the tooltip.\n  show = (virtualElement?: VirtualElement) => {\n    this.element.dataset.show = 'true'\n\n    if (virtualElement) {\n      computePosition(virtualElement, this.element, {\n        placement: 'top',\n        middleware: [\n          flip(),\n          offset(this.#offset),\n          shift(this.#shift),\n          ...this.#middleware,\n        ],\n        ...this.#floatingUIOptions,\n      })\n        .then(({ x, y }) => {\n          Object.assign(this.element.style, {\n            left: `${x}px`,\n            top: `${y}px`,\n          })\n        })\n        .catch(console.error)\n    }\n\n    this.onShow()\n  }\n\n  /// Hide the tooltip.\n  hide = () => {\n    if (this.element.dataset.show === 'false') return\n    this.element.dataset.show = 'false'\n\n    this.onHide()\n  }\n}\n","import type { SliceType } from '@milkdown/ctx'\nimport type { PluginSpec } from '@milkdown/prose/state'\nimport type { $Ctx, $Prose } from '@milkdown/utils'\n\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $ctx, $prose } from '@milkdown/utils'\n\n/// @internal\nexport type TooltipSpecId<Id extends string> = `${Id}_TOOLTIP_SPEC`\n\n/// @internal\nexport type TooltipPlugin<Id extends string, State = any> = [\n  $Ctx<PluginSpec<State>, TooltipSpecId<Id>>,\n  $Prose,\n] & {\n  key: SliceType<PluginSpec<State>, TooltipSpecId<Id>>\n  pluginKey: $Prose['key']\n}\n\n/// Create a tooltip plugin with a unique id.\nexport function tooltipFactory<Id extends string, State = any>(id: Id) {\n  const tooltipSpec = $ctx<PluginSpec<State>, TooltipSpecId<Id>>(\n    {},\n    `${id}_TOOLTIP_SPEC`\n  )\n  const tooltipPlugin = $prose((ctx) => {\n    const spec = ctx.get(tooltipSpec.key)\n    return new Plugin({\n      key: new PluginKey(`${id}_TOOLTIP`),\n      ...spec,\n    })\n  })\n  const result = [tooltipSpec, tooltipPlugin] as TooltipPlugin<Id>\n  result.key = tooltipSpec.key\n  result.pluginKey = tooltipPlugin.key\n  tooltipSpec.meta = {\n    package: '@milkdown/plugin-tooltip',\n    displayName: `Ctx<tooltipSpec>|${id}`,\n  }\n  tooltipPlugin.meta = {\n    package: '@milkdown/plugin-tooltip',\n    displayName: `Prose<tooltip>|${id}`,\n  }\n\n  return result\n}\n"],"names":[],"mappings":"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"}