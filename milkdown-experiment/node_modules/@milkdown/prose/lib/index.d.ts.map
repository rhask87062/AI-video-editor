{"version":3,"file":"index.d.ts","sources":["../src/toolkit/browser.ts","../src/toolkit/input-rules/custom-input-rules.ts","../src/toolkit/input-rules/common.ts","../src/toolkit/input-rules/mark-rule.ts","../src/toolkit/input-rules/node-rule.ts","../src/toolkit/position/index.ts","../src/toolkit/prose/helper.ts","../src/toolkit/prose/types.ts","../src/toolkit/prose/node.ts","../src/toolkit/prose/schema.ts","../src/toolkit/prose/selection.ts"],"sourcesContent":["/**\n * Copy paste from:\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/browser.ts\n */\n\nconst nav = typeof navigator != 'undefined' ? navigator : null\nconst doc = typeof document != 'undefined' ? document : null\nconst agent = (nav && nav.userAgent) || ''\n\nconst ie_edge = /Edge\\/(\\d+)/.exec(agent)\nconst ie_upto10 = /MSIE \\d/.exec(agent)\nconst ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(agent)\n\nexport const ie = !!(ie_upto10 || ie_11up || ie_edge)\nexport const ie_version = ie_upto10\n  ? (document as typeof document & { documentMode: unknown }).documentMode\n  : ie_11up\n    ? +ie_11up[1]!\n    : ie_edge\n      ? +ie_edge[1]!\n      : 0\nexport const gecko = !ie && /gecko\\/(\\d+)/i.test(agent)\nexport const gecko_version =\n  gecko && +(/Firefox\\/(\\d+)/.exec(agent) || [0, 0])[1]\n\nconst _chrome = !ie && /Chrome\\/(\\d+)/.exec(agent)\nexport const chrome = !!_chrome\nexport const chrome_version = _chrome ? +_chrome[1]! : 0\nexport const safari = !ie && !!nav && /Apple Computer/.test(nav.vendor)\n// Is true for both iOS and iPadOS for convenience\nexport const ios =\n  safari && (/Mobile\\/\\w+/.test(agent) || (!!nav && nav.maxTouchPoints > 2))\nexport const mac = ios || (nav ? /Mac/.test(nav.platform) : false)\nexport const android = /Android \\d/.test(agent)\nexport const webkit =\n  !!doc && 'webkitFontSmoothing' in doc.documentElement.style\nexport const webkit_version = webkit\n  ? +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1]\n  : 0\n","import type { InputRule } from '../../inputrules'\nimport type { EditorState, TextSelection, Transaction } from '../../state'\nimport type { EditorView } from '../../view'\n\nimport { Plugin, PluginKey } from '../../state'\n\nfunction run(\n  view: EditorView,\n  from: number,\n  to: number,\n  text: string,\n  rules: InputRule[],\n  plugin: Plugin\n) {\n  if (view.composing) return false\n  const state = view.state\n  const $from = state.doc.resolve(from)\n  if ($from.parent.type.spec.code) return false\n  const textBefore =\n    $from.parent.textBetween(\n      Math.max(0, $from.parentOffset - 500),\n      $from.parentOffset,\n      undefined,\n      '\\uFFFC'\n    ) + text\n  for (let _matcher of rules) {\n    const matcher = _matcher as unknown as {\n      match: RegExp\n      handler: (\n        state: EditorState,\n        match: string[],\n        from: number,\n        to: number\n      ) => Transaction\n      undoable?: boolean\n    }\n    const match = matcher.match.exec(textBefore)\n    const tr =\n      match &&\n      match[0] &&\n      matcher.handler(state, match, from - (match[0].length - text.length), to)\n    if (!tr) continue\n    if (matcher.undoable !== false)\n      tr.setMeta(plugin, { transform: tr, from, to, text })\n    view.dispatch(tr)\n    return true\n  }\n  return false\n}\n\nexport const customInputRulesKey = new PluginKey('MILKDOWN_CUSTOM_INPUTRULES')\nexport function customInputRules({ rules }: { rules: InputRule[] }): Plugin {\n  const plugin: Plugin = new Plugin({\n    key: customInputRulesKey,\n    isInputRules: true,\n\n    state: {\n      init() {\n        return null\n      },\n      apply(this: typeof plugin, tr, prev) {\n        const stored = tr.getMeta(this)\n        if (stored) return stored\n        return tr.selectionSet || tr.docChanged ? null : prev\n      },\n    },\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run(view, from, to, text, rules, plugin)\n      },\n      handleDOMEvents: {\n        compositionend: (view) => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection as TextSelection\n            if ($cursor) run(view, $cursor.pos, $cursor.pos, '', rules, plugin)\n          })\n          return false\n        },\n      },\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') return false\n        const { $cursor } = view.state.selection as TextSelection\n        if ($cursor)\n          return run(view, $cursor.pos, $cursor.pos, '\\n', rules, plugin)\n        return false\n      },\n    },\n  })\n  return plugin\n}\n","import type { Attrs } from '../../model'\nimport type { Transaction } from '../../state'\n\n/// @internal\nexport interface Captured {\n  group: string | undefined\n  fullMatch: string\n  start: number\n  end: number\n}\n\n/// @internal\nexport interface BeforeDispatch {\n  match: string[]\n  start: number\n  end: number\n  tr: Transaction\n}\n\n/// @internal\nexport interface Options {\n  getAttr?: (match: RegExpMatchArray) => Attrs\n  updateCaptured?: (captured: Captured) => Partial<Captured>\n  beforeDispatch?: (options: BeforeDispatch) => void\n}\n","import type { Mark, MarkType } from '../../model'\nimport type { Captured, Options } from './common'\n\nimport { InputRule } from '../../inputrules'\n\n/// Create an input rule for a mark.\nexport function markRule(\n  regexp: RegExp,\n  markType: MarkType,\n  options: Options = {}\n): InputRule {\n  return new InputRule(regexp, (state, match, start, end) => {\n    const { tr } = state\n    const matchLength = match.length\n\n    let group = match[matchLength - 1]\n    let fullMatch = match[0]\n    let initialStoredMarks: readonly Mark[] = []\n\n    let markEnd = end\n\n    const captured: Captured = {\n      group,\n      fullMatch,\n      start,\n      end,\n    }\n\n    const result = options.updateCaptured?.(captured)\n    Object.assign(captured, result)\n    ;({ group, fullMatch, start, end } = captured)\n\n    if (fullMatch === null) return null\n\n    if (group?.trim() === '') return null\n\n    if (group) {\n      const startSpaces = fullMatch.search(/\\S/)\n      const textStart = start + fullMatch.indexOf(group)\n      const textEnd = textStart + group.length\n\n      initialStoredMarks = tr.storedMarks ?? []\n\n      if (textEnd < end) tr.delete(textEnd, end)\n\n      if (textStart > start) tr.delete(start + startSpaces, textStart)\n\n      markEnd = start + startSpaces + group.length\n\n      const attrs = options.getAttr?.(match)\n\n      tr.addMark(start, markEnd, markType.create(attrs))\n      tr.setStoredMarks(initialStoredMarks)\n\n      options.beforeDispatch?.({ match, start, end, tr })\n    }\n\n    return tr\n  })\n}\n","import type { NodeType } from '../../model'\nimport type { Captured, Options } from './common'\n\nimport { InputRule } from '../../inputrules'\n\n/// Create an input rule for a node.\nexport function nodeRule(\n  regexp: RegExp,\n  nodeType: NodeType,\n  options: Options = {}\n): InputRule {\n  return new InputRule(regexp, (state, match, start, end) => {\n    const { tr } = state\n    let group: string | undefined = match[1]\n    let fullMatch = match[0]\n\n    const captured: Captured = {\n      group,\n      fullMatch,\n      start,\n      end,\n    }\n\n    const result = options.updateCaptured?.(captured)\n    Object.assign(captured, result)\n    ;({ group, fullMatch, start, end } = captured)\n\n    if (fullMatch === null) return null\n\n    if (!group || group.trim() === '') return null\n\n    const attrs = options.getAttr?.(match)\n    const node = nodeType.createAndFill(attrs)\n\n    if (node) {\n      tr.replaceRangeWith(\n        nodeType.isBlock ? tr.doc.resolve(start).before() : start,\n        end,\n        node\n      )\n      options.beforeDispatch?.({\n        match: [fullMatch, group ?? ''],\n        start,\n        end,\n        tr,\n      })\n    }\n\n    return tr\n  })\n}\n","import { expectDomTypeError, missingRootElement } from '@milkdown/exception'\n\nimport type { EditorView } from '../../view'\n\ntype Point = [top: number, left: number]\n\nexport function calculateNodePosition(\n  view: EditorView,\n  target: HTMLElement,\n  handler: (\n    selectedRect: DOMRect,\n    targetRect: DOMRect,\n    parentRect: DOMRect\n  ) => Point\n) {\n  const state = view.state\n  const { from } = state.selection\n\n  const { node } = view.domAtPos(from)\n  const element = node instanceof Text ? node.parentElement : node\n  if (!(element instanceof HTMLElement)) throw expectDomTypeError(element)\n\n  const selectedNodeRect = element.getBoundingClientRect()\n  const targetNodeRect = target.getBoundingClientRect()\n  const parent = target.parentElement\n  if (!parent) throw expectDomTypeError(parent)\n\n  const parentNodeRect = parent.getBoundingClientRect()\n\n  const [top, left] = handler(selectedNodeRect, targetNodeRect, parentNodeRect)\n\n  target.style.top = `${top}px`\n  target.style.left = `${left}px`\n}\n\ninterface Rect {\n  left: number\n  right: number\n  top: number\n  bottom: number\n}\n\nexport function calculateTextPosition(\n  view: EditorView,\n  target: HTMLElement,\n  handler: (\n    start: Rect,\n    end: Rect,\n    targetRect: DOMRect,\n    parentRect: DOMRect\n  ) => Point\n) {\n  const state = view.state\n  const { from, to } = state.selection\n  const start = view.coordsAtPos(from)\n  const end = view.coordsAtPos(to)\n\n  const targetNodeRect = target.getBoundingClientRect()\n  const parent = target.parentElement\n  if (!parent) throw missingRootElement()\n\n  const parentNodeRect = parent.getBoundingClientRect()\n\n  const [top, left] = handler(start, end, targetNodeRect, parentNodeRect)\n\n  target.style.top = `${top}px`\n  target.style.left = `${left}px`\n}\n\nfunction minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n\nexport function posToDOMRect(\n  view: EditorView,\n  from: number,\n  to: number\n): DOMRect {\n  const minPos = 0\n  const maxPos = view.state.doc.content.size\n  const resolvedFrom = minMax(from, minPos, maxPos)\n  const resolvedEnd = minMax(to, minPos, maxPos)\n  const start = view.coordsAtPos(resolvedFrom)\n  const end = view.coordsAtPos(resolvedEnd, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n","import type { NodeType, Node as ProseNode } from '../../model'\nimport type { Transaction } from '../../state'\n\nexport function cloneTr(tr: Transaction): Transaction {\n  return Object.assign(Object.create(tr), tr).setTime(Date.now())\n}\n\nexport function equalNodeType(\n  nodeType: NodeType | NodeType[],\n  node: ProseNode\n) {\n  return (\n    (Array.isArray(nodeType) && nodeType.includes(node.type)) ||\n    node.type === nodeType\n  )\n}\n","import type { Node } from '../../model'\n\nexport type Predicate = (node: Node) => boolean\n","import type { MarkType, Node, NodeType, ResolvedPos } from '../../model'\nimport type { Predicate } from './types'\n\nexport interface NodeWithPos {\n  pos: number\n  node: Node\n}\nexport interface NodeWithFromTo {\n  from: number\n  to: number\n  node: Node\n}\n\nexport function flatten(node: Node, descend = true): NodeWithPos[] {\n  const result: NodeWithPos[] = []\n  node.descendants((child, pos) => {\n    result.push({ node: child, pos })\n    if (!descend) return false\n\n    return undefined\n  })\n  return result\n}\n\nexport function findChildren(predicate: Predicate) {\n  return (node: Node, descend?: boolean): NodeWithPos[] =>\n    flatten(node, descend).filter((child) => predicate(child.node))\n}\n\nexport function findChildrenByMark(\n  node: Node,\n  markType: MarkType,\n  descend?: boolean\n): NodeWithPos[] {\n  return findChildren((child) => Boolean(markType.isInSet(child.marks)))(\n    node,\n    descend\n  )\n}\n\nexport function findParent(predicate: Predicate) {\n  return ($pos: ResolvedPos): NodeWithFromTo | undefined => {\n    for (let depth = $pos.depth; depth > 0; depth -= 1) {\n      const node = $pos.node(depth)\n\n      if (predicate(node)) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n        return {\n          from,\n          to,\n          node,\n        }\n      }\n    }\n\n    return undefined\n  }\n}\n\nexport function findParentNodeType($pos: ResolvedPos, nodeType: NodeType) {\n  return findParent((node) => node.type === nodeType)($pos)\n}\n","import { getAtomFromSchemaFail } from '@milkdown/exception'\n\nimport type { MarkType, NodeType, Schema } from '../../model'\n\nexport function getNodeFromSchema(type: string, schema: Schema): NodeType {\n  const target = schema.nodes[type]\n\n  if (!target) throw getAtomFromSchemaFail('node', type)\n\n  return target\n}\n\nexport function getMarkFromSchema(type: string, schema: Schema): MarkType {\n  const target = schema.marks[type]\n\n  if (!target) throw getAtomFromSchemaFail('mark', type)\n\n  return target\n}\n","import type { NodeType, Node as ProseNode, ResolvedPos } from '../../model'\nimport type { Selection } from '../../state'\nimport type { Predicate } from './types'\n\nimport { NodeSelection } from '../../state'\nimport { equalNodeType } from './helper'\n\nexport interface ContentNodeWithPos {\n  pos: number\n  start: number\n  depth: number\n  node: ProseNode\n}\n\nexport function findParentNodeClosestToPos(predicate: Predicate) {\n  return ($pos: ResolvedPos): ContentNodeWithPos | undefined => {\n    for (let i = $pos.depth; i > 0; i--) {\n      const node = $pos.node(i)\n      if (predicate(node)) {\n        return {\n          pos: i > 0 ? $pos.before(i) : 0,\n          start: $pos.start(i),\n          depth: i,\n          node,\n        }\n      }\n    }\n\n    return undefined\n  }\n}\n\nexport function findParentNode(predicate: Predicate) {\n  return (selection: Selection): ContentNodeWithPos | undefined => {\n    return findParentNodeClosestToPos(predicate)(selection.$from)\n  }\n}\n\nexport function findSelectedNodeOfType(\n  selection: Selection,\n  nodeType: NodeType\n): ContentNodeWithPos | undefined {\n  if (!(selection instanceof NodeSelection)) return\n\n  const { node, $from } = selection\n  if (equalNodeType(nodeType, node))\n    return {\n      node,\n      pos: $from.pos,\n      start: $from.start($from.depth),\n      depth: $from.depth,\n    }\n\n  return undefined\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACbA;AACA;AACP;AACA;;ACHO;AACP;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;ACfO;;ACAA;;ACFP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;;ACRA;;;ACDA;;ACCA;AACP;AACA;AACA;AACO;AACP;AACA;;AAEA;AACO;;AAEA;;AAEA;;ACdA;AACA;;ACCA;AACP;AACA;AACA;AACA;AACA;AACO;AACA;AACA;;;;;;;;;;;;;;;;"}