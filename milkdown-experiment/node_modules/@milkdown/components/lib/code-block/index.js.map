{"version":3,"file":"index.js","sources":["../../src/__internal__/meta.ts","../../src/code-block/config.ts","../../src/code-block/view/loader.ts","../../src/__internal__/components/icon.tsx","../../src/code-block/view/components/language-picker.tsx","../../src/code-block/view/components/preview-panel.tsx","../../src/code-block/view/components/code-block.tsx","../../src/code-block/view/node-view.ts","../../src/code-block/view/index.ts","../../src/code-block/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import type { LanguageDescription } from '@codemirror/language'\nimport type { Extension } from '@codemirror/state'\n\nimport { $ctx } from '@milkdown/utils'\n\nimport { withMeta } from '../__internal__/meta'\n\nexport interface CodeBlockConfig {\n  extensions: Extension[]\n  languages: LanguageDescription[]\n  expandIcon: () => string\n  searchIcon: () => string\n  clearSearchIcon: () => string\n  searchPlaceholder: string\n  noResultText: string\n  renderLanguage: (language: string, selected: boolean) => string\n  renderPreview: (\n    language: string,\n    content: string\n  ) => null | string | HTMLElement\n  previewToggleButton: (previewOnlyMode: boolean) => string\n  previewLabel: () => string\n}\n\nexport const defaultConfig: CodeBlockConfig = {\n  extensions: [],\n  languages: [],\n  expandIcon: () => '⬇',\n  searchIcon: () => '🔍',\n  clearSearchIcon: () => '⌫',\n  searchPlaceholder: 'Search language',\n  noResultText: 'No result',\n  renderLanguage: (language) => language,\n  renderPreview: () => null,\n  previewToggleButton: (previewOnlyMode) => (previewOnlyMode ? 'Edit' : 'Hide'),\n  previewLabel: () => 'Preview',\n}\n\nexport const codeBlockConfig = $ctx(defaultConfig, 'codeBlockConfigCtx')\n\nwithMeta(codeBlockConfig, {\n  displayName: 'Config<code-block>',\n  group: 'CodeBlock',\n})\n","import type { LanguageDescription, LanguageSupport } from '@codemirror/language'\n\nexport interface LanguageInfo {\n  name: string\n  alias: readonly string[]\n}\n\nexport class LanguageLoader {\n  private readonly map: Record<string, LanguageDescription>\n\n  constructor(private languages: LanguageDescription[]) {\n    this.map = {}\n\n    languages.forEach((language) => {\n      language.alias.forEach((alias) => {\n        this.map[alias] = language\n      })\n    })\n  }\n\n  getAll(): LanguageInfo[] {\n    return this.languages.map((language): LanguageInfo => {\n      return {\n        name: language.name,\n        alias: language.alias,\n      }\n    })\n  }\n\n  load(languageName: string): Promise<LanguageSupport | undefined> {\n    const languageMap = this.map\n    const language = languageMap[languageName.toLowerCase()]\n\n    if (!language) return Promise.resolve(undefined)\n\n    if (language.support) return Promise.resolve(language.support)\n\n    return language.load()\n  }\n}\n","import clsx from 'clsx'\nimport DOMPurify from 'dompurify'\nimport { h } from 'vue'\n\nh\n\ntype IconProps = {\n  icon?: string | null\n  class?: string\n  onClick?: (event: PointerEvent) => void\n}\n\nexport function Icon({ icon, class: className, onClick }: IconProps) {\n  return (\n    <span\n      class={clsx('milkdown-icon', className)}\n      onPointerdown={onClick}\n      ref={(el) => {\n        if (el && icon) {\n          ;(el as HTMLElement).innerHTML = DOMPurify.sanitize(icon.trim())\n        }\n      }}\n    />\n  )\n}\n\nIcon.props = {\n  icon: {\n    type: String,\n    required: false,\n  },\n  class: {\n    type: String,\n    required: false,\n  },\n  onClick: {\n    type: Function,\n    required: false,\n  },\n}\n","import { computePosition } from '@floating-ui/dom'\nimport clsx from 'clsx'\nimport {\n  computed,\n  defineComponent,\n  ref,\n  h,\n  Fragment,\n  onMounted,\n  onUnmounted,\n  watch,\n} from 'vue'\n\nimport type { CodeBlockProps } from './code-block'\n\nimport { Icon } from '../../../__internal__/components/icon'\n\ntype LanguagePickerProps = Pick<\n  CodeBlockProps,\n  'language' | 'config' | 'setLanguage' | 'getAllLanguages' | 'getReadOnly'\n>\n\nh\nFragment\nexport const LanguagePicker = defineComponent<LanguagePickerProps>({\n  props: {\n    language: {\n      type: Object,\n      required: true,\n    },\n    getReadOnly: {\n      type: Function,\n      required: true,\n    },\n    config: {\n      type: Object,\n      required: true,\n    },\n    getAllLanguages: {\n      type: Function,\n      required: true,\n    },\n    setLanguage: {\n      type: Function,\n      required: true,\n    },\n  },\n  setup({ language, config, setLanguage, getAllLanguages, getReadOnly }) {\n    const triggerRef = ref<HTMLButtonElement>()\n    const showPicker = ref(false)\n    const searchRef = ref<HTMLInputElement>()\n    const pickerRef = ref<HTMLDivElement>()\n    const filter = ref('')\n\n    watch([showPicker, triggerRef, pickerRef], () => {\n      filter.value = ''\n      const picker = triggerRef.value\n      const languageList = pickerRef.value\n      if (!picker || !languageList) return\n\n      computePosition(picker, languageList, {\n        placement: 'bottom-start',\n      })\n        .then(({ x, y }) => {\n          Object.assign(languageList.style, {\n            left: `${x}px`,\n            top: `${y}px`,\n          })\n        })\n        .catch(console.error)\n    })\n\n    const onTogglePicker = (e: Event) => {\n      e.preventDefault()\n      e.stopPropagation()\n      if (getReadOnly()) return\n\n      const next = !showPicker.value\n      showPicker.value = next\n      if (next) {\n        setTimeout(() => searchRef.value?.focus(), 0)\n      }\n    }\n\n    const changeFilter = (e: Event) => {\n      const target = e.target as HTMLInputElement\n      filter.value = target.value\n    }\n\n    const onSearchKeydown = (e: Event) => {\n      if ((e as KeyboardEvent).key === 'Escape') filter.value = ''\n    }\n\n    const languages = computed(() => {\n      if (!showPicker.value) return []\n\n      const all = getAllLanguages() ?? []\n\n      const selected = all.find(\n        (languageInfo) =>\n          languageInfo.name.toLowerCase() === language.value.toLowerCase()\n      )\n\n      const filtered = all.filter((languageInfo) => {\n        const currentValue = filter.value.toLowerCase()\n\n        return (\n          (languageInfo.name.toLowerCase().includes(currentValue) ||\n            languageInfo.alias.some((alias) =>\n              alias.toLowerCase().includes(currentValue)\n            )) &&\n          languageInfo !== selected\n        )\n      })\n\n      if (filtered.length === 0) return []\n\n      if (!selected) return filtered\n\n      return [selected, ...filtered]\n    })\n\n    const clickHandler = (e: MouseEvent) => {\n      const target = e.target as HTMLElement\n\n      if (triggerRef.value && triggerRef.value.contains(target)) return\n\n      const picker = pickerRef.value\n      const trigger = triggerRef.value\n      if (!trigger || !picker) return\n\n      if (trigger.dataset.expanded !== 'true') return\n\n      if (!picker.contains(target)) showPicker.value = false\n    }\n\n    onMounted(() => {\n      window.addEventListener('click', clickHandler)\n    })\n\n    onUnmounted(() => {\n      window.removeEventListener('click', clickHandler)\n    })\n\n    return () => {\n      return (\n        <>\n          <button\n            type=\"button\"\n            ref={triggerRef}\n            class=\"language-button\"\n            onClick={onTogglePicker}\n            data-expanded={String(showPicker.value)}\n          >\n            {language.value || 'Text'}\n            <div class=\"expand-icon\">\n              <Icon icon={config.expandIcon()} />\n            </div>\n          </button>\n          <div ref={pickerRef} class=\"language-picker\">\n            {showPicker.value ? (\n              <div class=\"list-wrapper\">\n                <div class=\"search-box\">\n                  <div class=\"search-icon\">\n                    <Icon icon={config.searchIcon()} />\n                  </div>\n                  <input\n                    ref={searchRef}\n                    class=\"search-input\"\n                    placeholder={config.searchPlaceholder}\n                    value={filter.value}\n                    onInput={changeFilter}\n                    onKeydown={onSearchKeydown}\n                  />\n                  <div\n                    class={clsx(\n                      'clear-icon',\n                      filter.value.length === 0 && 'hidden'\n                    )}\n                    onMousedown={(e) => {\n                      e.preventDefault()\n                      filter.value = ''\n                    }}\n                  >\n                    <Icon icon={config.clearSearchIcon()} />\n                  </div>\n                </div>\n                <ul\n                  class=\"language-list\"\n                  role=\"listbox\"\n                  onKeydown={(e) => {\n                    if (e.key === 'Enter') {\n                      const active = document.activeElement\n                      if (\n                        active instanceof HTMLElement &&\n                        active.dataset.language\n                      )\n                        setLanguage(active.dataset.language)\n                    }\n                  }}\n                >\n                  {!languages.value.length ? (\n                    <li class=\"language-list-item no-result\">\n                      {config.noResultText}\n                    </li>\n                  ) : (\n                    languages.value.map((languageInfo) => (\n                      <li\n                        role=\"listitem\"\n                        tabindex=\"0\"\n                        class=\"language-list-item\"\n                        aria-selected={\n                          languageInfo.name.toLowerCase() ===\n                          language.value.toLowerCase()\n                        }\n                        data-language={languageInfo.name}\n                        onClick={() => {\n                          setLanguage(languageInfo.name)\n                          showPicker.value = false\n                        }}\n                      >\n                        {config.renderLanguage(\n                          languageInfo.name,\n                          languageInfo.name.toLowerCase() ===\n                            language.value.toLowerCase()\n                        )}\n                      </li>\n                    ))\n                  )}\n                </ul>\n              </div>\n            ) : null}\n          </div>\n        </>\n      )\n    }\n  },\n})\n","import clsx from 'clsx'\nimport DOMPurify from 'dompurify'\nimport {\n  defineComponent,\n  ref,\n  watchEffect,\n  type Ref,\n  h,\n  Fragment,\n  type ComputedRef,\n} from 'vue'\n\nimport type { CodeBlockProps } from './code-block'\n\nh\nFragment\n\ntype PreviewPanelProps = Pick<\n  CodeBlockProps,\n  'text' | 'language' | 'config'\n> & {\n  previewOnlyMode: Ref<boolean>\n  preview: ComputedRef<string | HTMLElement | null>\n}\n\nexport const PreviewPanel = defineComponent<PreviewPanelProps>({\n  props: {\n    text: {\n      type: Object,\n      required: true,\n    },\n    language: {\n      type: Object,\n      required: true,\n    },\n    config: {\n      type: Object,\n      required: true,\n    },\n    previewOnlyMode: {\n      type: Object,\n      required: true,\n    },\n    preview: {\n      type: Object,\n      required: true,\n    },\n  },\n  setup(props) {\n    const { previewOnlyMode, config, preview } = props\n    const previewRef = ref<HTMLDivElement>()\n\n    watchEffect(() => {\n      const previewContainer = previewRef.value\n      if (!previewContainer) return\n\n      while (previewContainer.firstChild) {\n        previewContainer.removeChild(previewContainer.firstChild)\n      }\n\n      const previewContent = preview.value\n\n      if (\n        typeof previewContent === 'string' ||\n        previewContent instanceof Element\n      ) {\n        previewContainer.innerHTML = DOMPurify.sanitize(previewContent)\n      }\n    })\n\n    return () => {\n      if (!preview.value) return null\n\n      return (\n        <div class=\"preview-panel\">\n          {!previewOnlyMode.value && (\n            <>\n              <div class=\"preview-divider\" />\n              <div class={clsx('preview-label', previewOnlyMode && 'hidden')}>\n                {config.previewLabel()}\n              </div>\n            </>\n          )}\n          <div ref={previewRef} class=\"preview\" />\n        </div>\n      )\n    }\n  },\n})\n","import type { EditorView as CodeMirror } from '@codemirror/view'\n\nimport clsx from 'clsx'\nimport {\n  defineComponent,\n  ref,\n  type Ref,\n  h,\n  Fragment,\n  computed,\n  onMounted,\n} from 'vue'\n\nimport type { CodeBlockConfig } from '../../config'\nimport type { LanguageInfo } from '../loader'\n\nimport { Icon } from '../../../__internal__/components/icon'\nimport { LanguagePicker } from './language-picker'\nimport { PreviewPanel } from './preview-panel'\n\nh\nFragment\n\nexport type CodeBlockProps = {\n  text: Ref<string>\n  selected: Ref<boolean>\n  getReadOnly: () => boolean\n  codemirror: CodeMirror\n  language: Ref<string>\n  getAllLanguages: () => Array<LanguageInfo>\n  setLanguage: (language: string) => void\n  config: Omit<CodeBlockConfig, 'languages' | 'extensions'>\n}\n\nexport const CodeBlock = defineComponent<CodeBlockProps>({\n  props: {\n    text: {\n      type: Object,\n      required: true,\n    },\n    selected: {\n      type: Object,\n      required: true,\n    },\n    getReadOnly: {\n      type: Function,\n      required: true,\n    },\n    codemirror: {\n      type: Object,\n      required: true,\n    },\n    language: {\n      type: Object,\n      required: true,\n    },\n    getAllLanguages: {\n      type: Function,\n      required: true,\n    },\n    setLanguage: {\n      type: Function,\n      required: true,\n    },\n    config: {\n      type: Object,\n      required: true,\n    },\n  },\n  setup(props) {\n    const previewOnlyMode = ref(false)\n    const codemirrorHostRef = ref<HTMLDivElement>()\n\n    onMounted(() => {\n      while (codemirrorHostRef.value?.firstChild) {\n        codemirrorHostRef.value.removeChild(codemirrorHostRef.value.firstChild)\n      }\n\n      if (codemirrorHostRef.value) {\n        codemirrorHostRef.value.appendChild(props.codemirror.dom)\n      }\n    })\n\n    const preview = computed(() => {\n      const text = props.text.value\n      const language = props.language.value\n\n      return props.config.renderPreview(language, text)\n    })\n\n    return () => {\n      return (\n        <>\n          <div class=\"tools\">\n            <LanguagePicker\n              language={props.language}\n              config={props.config}\n              setLanguage={props.setLanguage}\n              getAllLanguages={props.getAllLanguages}\n              getReadOnly={props.getReadOnly}\n            />\n            {preview.value ? (\n              <button\n                class=\"preview-toggle-button\"\n                onClick={() => (previewOnlyMode.value = !previewOnlyMode.value)}\n              >\n                <Icon\n                  icon={props.config.previewToggleButton(previewOnlyMode.value)}\n                />\n              </button>\n            ) : null}\n          </div>\n          <div\n            ref={codemirrorHostRef}\n            class={clsx(\n              'codemirror-host',\n              preview.value && previewOnlyMode.value && 'hidden'\n            )}\n          />\n          <PreviewPanel\n            text={props.text}\n            language={props.language}\n            config={props.config}\n            previewOnlyMode={previewOnlyMode}\n            preview={preview}\n          />\n        </>\n      )\n    }\n  },\n})\n","import type { Line, SelectionRange } from '@codemirror/state'\nimport type { Node } from '@milkdown/prose/model'\nimport type { EditorView, NodeView } from '@milkdown/prose/view'\n\nimport { Compartment, EditorState } from '@codemirror/state'\nimport {\n  EditorView as CodeMirror,\n  type KeyBinding,\n  type ViewUpdate,\n  keymap as cmKeymap,\n} from '@codemirror/view'\nimport { exitCode } from '@milkdown/prose/commands'\nimport { redo, undo } from '@milkdown/prose/history'\nimport { TextSelection } from '@milkdown/prose/state'\nimport { createApp, ref, watchEffect, type App, type WatchHandle } from 'vue'\n\nimport type { CodeBlockConfig } from '../config'\nimport type { LanguageLoader } from './loader'\n\nimport { CodeBlock } from './components/code-block'\n\nexport class CodeMirrorBlock implements NodeView {\n  dom: HTMLElement\n  cm: CodeMirror\n  app: App\n\n  selected = ref(false)\n  language = ref('')\n  text = ref('')\n\n  private updating = false\n  private languageName: string = ''\n  private disposeSelectedWatcher: WatchHandle\n\n  private readonly languageConf: Compartment\n  private readonly readOnlyConf: Compartment\n\n  constructor(\n    public node: Node,\n    public view: EditorView,\n    public getPos: () => number | undefined,\n    public loader: LanguageLoader,\n    public config: CodeBlockConfig\n  ) {\n    this.languageConf = new Compartment()\n    this.readOnlyConf = new Compartment()\n\n    this.cm = new CodeMirror({\n      doc: this.node.textContent,\n      root: this.view.root,\n      extensions: [\n        this.readOnlyConf.of(EditorState.readOnly.of(!this.view.editable)),\n        cmKeymap.of(this.codeMirrorKeymap()),\n        this.languageConf.of([]),\n        EditorState.changeFilter.of(() => this.view.editable),\n        ...config.extensions,\n        CodeMirror.updateListener.of(this.forwardUpdate),\n      ],\n    })\n\n    this.app = this.createApp()\n\n    this.dom = this.createDom(this.app)\n\n    this.disposeSelectedWatcher = watchEffect(() => {\n      const isSelected = this.selected.value\n      if (isSelected) {\n        this.dom.classList.add('selected')\n      } else {\n        this.dom.classList.remove('selected')\n      }\n    })\n\n    this.updateLanguage()\n  }\n\n  private forwardUpdate = (update: ViewUpdate) => {\n    if (this.updating || !this.cm.hasFocus) return\n    let offset = (this.getPos() ?? 0) + 1\n    const { main } = update.state.selection\n    const selFrom = offset + main.from\n    const selTo = offset + main.to\n    const pmSel = this.view.state.selection\n    if (update.docChanged || pmSel.from !== selFrom || pmSel.to !== selTo) {\n      const tr = this.view.state.tr\n      update.changes.iterChanges((fromA, toA, fromB, toB, text) => {\n        if (text.length)\n          tr.replaceWith(\n            offset + fromA,\n            offset + toA,\n            this.view.state.schema.text(text.toString())\n          )\n        else tr.delete(offset + fromA, offset + toA)\n        offset += toB - fromB - (toA - fromA)\n      })\n      tr.setSelection(TextSelection.create(tr.doc, selFrom, selTo))\n      this.view.dispatch(tr)\n    }\n  }\n\n  private createApp = () => {\n    return createApp(CodeBlock, {\n      text: this.text,\n      selected: this.selected,\n      codemirror: this.cm,\n      language: this.language,\n      getAllLanguages: this.getAllLanguages,\n      getReadOnly: () => !this.view.editable,\n      setLanguage: this.setLanguage,\n      config: this.config,\n    })\n  }\n\n  private createDom(app: App) {\n    const dom = document.createElement('div')\n    dom.className = 'milkdown-code-block'\n    this.text.value = this.node.textContent\n    app.mount(dom)\n    return dom\n  }\n\n  private updateLanguage() {\n    const languageName = this.node.attrs.language\n\n    if (languageName === this.languageName) return\n\n    this.language.value = languageName\n    const language = this.loader.load(languageName ?? '')\n\n    language\n      .then((lang) => {\n        if (lang) {\n          this.cm.dispatch({\n            effects: this.languageConf.reconfigure(lang),\n          })\n          this.languageName = languageName\n        }\n      })\n      .catch(console.error)\n  }\n\n  private codeMirrorKeymap = (): KeyBinding[] => {\n    const view = this.view\n    return [\n      { key: 'ArrowUp', run: () => this.maybeEscape('line', -1) },\n      { key: 'ArrowLeft', run: () => this.maybeEscape('char', -1) },\n      { key: 'ArrowDown', run: () => this.maybeEscape('line', 1) },\n      { key: 'ArrowRight', run: () => this.maybeEscape('char', 1) },\n      {\n        key: 'Mod-Enter',\n        run: () => {\n          if (!exitCode(view.state, view.dispatch)) return false\n\n          view.focus()\n          return true\n        },\n      },\n      { key: 'Mod-z', run: () => undo(view.state, view.dispatch) },\n      { key: 'Shift-Mod-z', run: () => redo(view.state, view.dispatch) },\n      { key: 'Mod-y', run: () => redo(view.state, view.dispatch) },\n      {\n        key: 'Backspace',\n        run: () => {\n          const ranges = this.cm.state.selection.ranges\n\n          if (ranges.length > 1) return false\n\n          const selection = ranges[0]\n\n          if (selection && (!selection.empty || selection.anchor > 0))\n            return false\n\n          if (this.cm.state.doc.lines >= 2) return false\n\n          const state = this.view.state\n          const pos = this.getPos() ?? 0\n          const tr = state.tr.replaceWith(\n            pos,\n            pos + this.node.nodeSize,\n            state.schema.nodes.paragraph!.createChecked({}, this.node.content)\n          )\n\n          tr.setSelection(TextSelection.near(tr.doc.resolve(pos)))\n\n          this.view.dispatch(tr)\n          this.view.focus()\n          return true\n        },\n      },\n    ]\n  }\n\n  private maybeEscape = (unit: 'line' | 'char', dir: -1 | 1): boolean => {\n    const { state } = this.cm\n    let main: SelectionRange | Line = state.selection.main\n    if (!main.empty) return false\n    if (unit === 'line') main = state.doc.lineAt(main.head)\n    if (dir < 0 ? main.from > 0 : main.to < state.doc.length) return false\n\n    const targetPos = (this.getPos() ?? 0) + (dir < 0 ? 0 : this.node.nodeSize)\n    const selection = TextSelection.near(\n      this.view.state.doc.resolve(targetPos),\n      dir\n    )\n    const tr = this.view.state.tr.setSelection(selection).scrollIntoView()\n    this.view.dispatch(tr)\n    this.view.focus()\n    return true\n  }\n\n  setSelection(anchor: number, head: number) {\n    if (!this.cm.dom.isConnected) return\n\n    this.cm.focus()\n    this.updating = true\n    this.cm.dispatch({ selection: { anchor, head } })\n    this.updating = false\n  }\n\n  update(node: Node) {\n    if (node.type !== this.node.type) return false\n\n    if (this.updating) return true\n\n    this.node = node\n    this.text.value = node.textContent\n    this.updateLanguage()\n    if (this.view.editable === this.cm.state.readOnly) {\n      this.cm.dispatch({\n        effects: this.readOnlyConf.reconfigure(\n          EditorState.readOnly.of(!this.view.editable)\n        ),\n      })\n    }\n\n    const change = computeChange(this.cm.state.doc.toString(), node.textContent)\n    if (change) {\n      this.updating = true\n      this.cm.dispatch({\n        changes: { from: change.from, to: change.to, insert: change.text },\n      })\n      this.updating = false\n    }\n    return true\n  }\n\n  selectNode() {\n    this.selected.value = true\n    this.cm.focus()\n  }\n\n  deselectNode() {\n    this.selected.value = false\n  }\n\n  stopEvent() {\n    return true\n  }\n\n  destroy() {\n    this.app.unmount()\n    this.cm.destroy()\n    this.disposeSelectedWatcher()\n  }\n\n  setLanguage = (language: string) => {\n    this.view.dispatch(\n      this.view.state.tr.setNodeAttribute(\n        this.getPos() ?? 0,\n        'language',\n        language\n      )\n    )\n  }\n\n  getAllLanguages = () => {\n    return this.loader.getAll()\n  }\n}\n\nfunction computeChange(\n  oldVal: string,\n  newVal: string\n): { from: number; to: number; text: string } | null {\n  if (oldVal === newVal) return null\n\n  let start = 0\n  let oldEnd = oldVal.length\n  let newEnd = newVal.length\n\n  while (\n    start < oldEnd &&\n    oldVal.charCodeAt(start) === newVal.charCodeAt(start)\n  )\n    ++start\n\n  while (\n    oldEnd > start &&\n    newEnd > start &&\n    oldVal.charCodeAt(oldEnd - 1) === newVal.charCodeAt(newEnd - 1)\n  ) {\n    oldEnd--\n    newEnd--\n  }\n\n  return { from: start, to: oldEnd, text: newVal.slice(start, newEnd) }\n}\n","import type { NodeViewConstructor } from '@milkdown/prose/view'\n\nimport { codeBlockSchema } from '@milkdown/preset-commonmark'\nimport { $view } from '@milkdown/utils'\n\nimport { withMeta } from '../../__internal__/meta'\nimport { codeBlockConfig } from '../config'\nimport { LanguageLoader } from './loader'\nimport { CodeMirrorBlock } from './node-view'\n\nexport const codeBlockView = $view(\n  codeBlockSchema.node,\n  (ctx): NodeViewConstructor => {\n    const config = ctx.get(codeBlockConfig.key)\n    const languageLoader = new LanguageLoader(config.languages)\n    return (node, view, getPos) =>\n      new CodeMirrorBlock(node, view, getPos, languageLoader, config)\n  }\n)\n\nwithMeta(codeBlockView, {\n  displayName: 'NodeView<code-block>',\n  group: 'CodeBlock',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\n\nimport { codeBlockConfig } from './config'\nimport { codeBlockView } from './view'\n\nexport * from './config'\nexport * from './view'\n\nexport const codeBlockComponent: MilkdownPlugin[] = [\n  codeBlockView,\n  codeBlockConfig,\n]\n"],"names":["CodeMirror","cmKeymap"],"mappings":"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"}