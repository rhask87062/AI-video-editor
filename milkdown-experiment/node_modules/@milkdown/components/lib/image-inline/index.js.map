{"version":3,"file":"index.js","sources":["../../src/__internal__/meta.ts","../../src/image-inline/config.ts","../../src/__internal__/components/icon.tsx","../../src/__internal__/components/image-input.tsx","../../src/image-inline/components/image-inline.tsx","../../src/image-inline/view.ts","../../src/image-inline/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>\n): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import { $ctx } from '@milkdown/utils'\n\nimport { withMeta } from '../__internal__/meta'\n\nexport interface InlineImageConfig {\n  imageIcon: () => string | undefined\n  uploadButton: () => string | undefined\n  confirmButton: () => string | undefined\n  uploadPlaceholderText: string\n  onUpload: (file: File) => Promise<string>\n  proxyDomURL?: (url: string) => Promise<string> | string\n}\n\nexport const defaultInlineImageConfig: InlineImageConfig = {\n  imageIcon: () => '🌌',\n  uploadButton: () => 'Upload',\n  confirmButton: () => '⏎',\n  uploadPlaceholderText: '/Paste',\n  onUpload: (file) => Promise.resolve(URL.createObjectURL(file)),\n}\n\nexport const inlineImageConfig = $ctx(\n  defaultInlineImageConfig,\n  'inlineImageConfigCtx'\n)\n\nwithMeta(inlineImageConfig, {\n  displayName: 'Config<image-inline>',\n  group: 'ImageInline',\n})\n","import clsx from 'clsx'\nimport DOMPurify from 'dompurify'\nimport { h } from 'vue'\n\nh\n\ntype IconProps = {\n  icon?: string | null\n  class?: string\n  onClick?: (event: PointerEvent) => void\n}\n\nexport function Icon({ icon, class: className, onClick }: IconProps) {\n  return (\n    <span\n      class={clsx('milkdown-icon', className)}\n      onPointerdown={onClick}\n      ref={(el) => {\n        if (el && icon) {\n          ;(el as HTMLElement).innerHTML = DOMPurify.sanitize(icon.trim())\n        }\n      }}\n    />\n  )\n}\n\nIcon.props = {\n  icon: {\n    type: String,\n    required: false,\n  },\n  class: {\n    type: String,\n    required: false,\n  },\n  onClick: {\n    type: Function,\n    required: false,\n  },\n}\n","import clsx from 'clsx'\nimport { customAlphabet } from 'nanoid'\nimport { defineComponent, ref, h, type Ref } from 'vue'\n\nimport { Icon } from './icon'\n\nh\n\nconst nanoid = customAlphabet('abcdefg', 8)\n\ntype ImageInputProps = {\n  src: Ref<string | undefined>\n  selected: Ref<boolean>\n  readonly: Ref<boolean>\n  setLink: (link: string) => void\n\n  imageIcon?: string\n  uploadButton?: string\n  confirmButton?: string\n  uploadPlaceholderText?: string\n\n  className?: string\n\n  onUpload: (file: File) => Promise<string>\n}\n\nexport const ImageInput = defineComponent<ImageInputProps>({\n  props: {\n    src: {\n      type: Object,\n      required: true,\n    },\n    selected: {\n      type: Object,\n      required: true,\n    },\n    readonly: {\n      type: Object,\n      required: true,\n    },\n    setLink: {\n      type: Function,\n      required: true,\n    },\n    imageIcon: {\n      type: String,\n      required: false,\n    },\n    uploadButton: {\n      type: String,\n      required: false,\n    },\n    confirmButton: {\n      type: String,\n      required: false,\n    },\n    uploadPlaceholderText: {\n      type: String,\n      required: false,\n    },\n    onUpload: {\n      type: Function,\n      required: true,\n    },\n  },\n  setup({\n    readonly,\n    src,\n    setLink,\n    onUpload,\n    imageIcon,\n    uploadButton,\n    confirmButton,\n    uploadPlaceholderText,\n    className,\n  }) {\n    const focusLinkInput = ref(false)\n    const linkInputRef = ref<HTMLInputElement>()\n    const currentLink = ref(src.value ?? '')\n    const uuid = ref(nanoid())\n    const hidePlaceholder = ref(src.value?.length !== 0)\n    const onEditLink = (e: Event) => {\n      const target = e.target as HTMLInputElement\n      const value = target.value\n      hidePlaceholder.value = value.length !== 0\n      currentLink.value = value\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      if (e.key === 'Enter') {\n        setLink(linkInputRef.value?.value ?? '')\n      }\n    }\n\n    const onConfirmLinkInput = () => {\n      setLink(linkInputRef.value?.value ?? '')\n    }\n\n    const onUploadFile = (e: Event) => {\n      const file = (e.target as HTMLInputElement).files?.[0]\n      if (!file) return\n\n      onUpload(file)\n        .then((url) => {\n          if (!url) return\n\n          setLink(url)\n          hidePlaceholder.value = true\n        })\n        .catch((err) => {\n          console.error('An error occurred while uploading image')\n          console.error(err)\n        })\n    }\n\n    return () => {\n      return (\n        <div class={clsx('image-edit', className)}>\n          <Icon icon={imageIcon} class=\"image-icon\" />\n          <div class={clsx('link-importer', focusLinkInput.value && 'focus')}>\n            <input\n              ref={linkInputRef}\n              draggable=\"true\"\n              onDragstart={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n              }}\n              disabled={readonly.value}\n              class=\"link-input-area\"\n              value={currentLink.value}\n              onInput={onEditLink}\n              onKeydown={onKeydown}\n              onFocus={() => (focusLinkInput.value = true)}\n              onBlur={() => (focusLinkInput.value = false)}\n            />\n            {!hidePlaceholder.value && (\n              <div class=\"placeholder\">\n                <input\n                  disabled={readonly.value}\n                  class=\"hidden\"\n                  id={uuid.value}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={onUploadFile}\n                />\n                <label class=\"uploader\" for={uuid.value}>\n                  <Icon icon={uploadButton} />\n                </label>\n                <span class=\"text\" onClick={() => linkInputRef.value?.focus()}>\n                  {uploadPlaceholderText}\n                </span>\n              </div>\n            )}\n          </div>\n          {currentLink.value && (\n            <div class=\"confirm\" onClick={() => onConfirmLinkInput()}>\n              <Icon icon={confirmButton} />\n            </div>\n          )}\n        </div>\n      )\n    }\n  },\n})\n","import { h, Fragment, type Ref, defineComponent } from 'vue'\n\nimport type { InlineImageConfig } from '../config'\n\nimport { ImageInput } from '../../__internal__/components/image-input'\n\nh\nFragment\n\ntype Attrs = {\n  src: string\n  alt: string\n  title: string\n}\n\nexport type MilkdownImageInlineProps = {\n  selected: Ref<boolean>\n  readonly: Ref<boolean>\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n  config: InlineImageConfig\n} & {\n  [P in keyof Attrs]: Ref<Attrs[P] | undefined>\n}\n\nexport const MilkdownImageInline = defineComponent<MilkdownImageInlineProps>({\n  props: {\n    src: {\n      type: Object,\n      required: true,\n    },\n    alt: {\n      type: Object,\n      required: true,\n    },\n    title: {\n      type: Object,\n      required: true,\n    },\n    selected: {\n      type: Object,\n      required: true,\n    },\n    readonly: {\n      type: Object,\n      required: true,\n    },\n    setAttr: {\n      type: Function,\n      required: true,\n    },\n    config: {\n      type: Object,\n      required: true,\n    },\n  },\n  setup(props) {\n    const { src, alt, title } = props\n    return () => {\n      if (!src.value?.length) {\n        return (\n          <ImageInput\n            src={props.src}\n            selected={props.selected}\n            readonly={props.readonly}\n            setLink={(link) => props.setAttr('src', link)}\n            imageIcon={props.config.imageIcon()}\n            uploadButton={props.config.uploadButton()}\n            confirmButton={props.config.confirmButton()}\n            uploadPlaceholderText={props.config.uploadPlaceholderText}\n            onUpload={props.config.onUpload}\n            className=\"empty-image-inline\"\n          />\n        )\n      }\n      return (\n        <img\n          class=\"image-inline\"\n          src={src.value}\n          alt={alt.value}\n          title={title.value}\n        />\n      )\n    }\n  },\n})\n","import type { Node } from '@milkdown/prose/model'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\n\nimport { imageSchema } from '@milkdown/preset-commonmark'\nimport { $view } from '@milkdown/utils'\nimport DOMPurify from 'dompurify'\nimport { createApp, ref, watchEffect } from 'vue'\n\nimport { withMeta } from '../__internal__/meta'\nimport { MilkdownImageInline } from './components/image-inline'\nimport { inlineImageConfig } from './config'\n\nexport const inlineImageView = $view(\n  imageSchema.node,\n  (ctx): NodeViewConstructor => {\n    return (initialNode, view, getPos) => {\n      const src = ref(initialNode.attrs.src)\n      const alt = ref(initialNode.attrs.alt)\n      const title = ref(initialNode.attrs.title)\n      const selected = ref(false)\n      const readonly = ref(!view.editable)\n      const setAttr = (attr: string, value: unknown) => {\n        if (!view.editable) return\n        const pos = getPos()\n        if (pos == null) return\n        view.dispatch(\n          view.state.tr.setNodeAttribute(\n            pos,\n            attr,\n            attr === 'src' ? DOMPurify.sanitize(value as string) : value\n          )\n        )\n      }\n\n      const config = ctx.get(inlineImageConfig.key)\n      const app = createApp(MilkdownImageInline, {\n        src,\n        alt,\n        title,\n        selected,\n        readonly,\n        setAttr,\n        config,\n      })\n      const dom = document.createElement('span')\n      dom.className = 'milkdown-image-inline'\n      app.mount(dom)\n      const disposeSelectedWatcher = watchEffect(() => {\n        const isSelected = selected.value\n        if (isSelected) {\n          dom.classList.add('selected')\n        } else {\n          dom.classList.remove('selected')\n        }\n      })\n      const proxyDomURL = config.proxyDomURL\n      const bindAttrs = (node: Node) => {\n        if (!proxyDomURL) {\n          src.value = node.attrs.src\n        } else {\n          const proxiedURL = proxyDomURL(node.attrs.src)\n          if (typeof proxiedURL === 'string') {\n            src.value = proxiedURL\n          } else {\n            proxiedURL\n              .then((url) => {\n                src.value = url\n              })\n              .catch(console.error)\n          }\n        }\n        alt.value = node.attrs.alt\n        title.value = node.attrs.title\n      }\n      bindAttrs(initialNode)\n      return {\n        dom,\n        update: (updatedNode) => {\n          if (updatedNode.type !== initialNode.type) return false\n\n          bindAttrs(updatedNode)\n          return true\n        },\n        stopEvent: (e) => {\n          if (e.target instanceof HTMLInputElement) return true\n\n          return false\n        },\n        selectNode: () => {\n          selected.value = true\n        },\n        deselectNode: () => {\n          selected.value = false\n        },\n        destroy: () => {\n          disposeSelectedWatcher()\n          app.unmount()\n          dom.remove()\n        },\n      }\n    }\n  }\n)\n\nwithMeta(inlineImageView, {\n  displayName: 'NodeView<image-inline>',\n  group: 'ImageInline',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\n\nimport { inlineImageConfig } from './config'\nimport { inlineImageView } from './view'\n\nexport * from './config'\nexport * from './view'\n\nexport const imageInlineComponent: MilkdownPlugin[] = [\n  inlineImageConfig,\n  inlineImageView,\n]\n"],"names":["_a","_b"],"mappings":"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"}