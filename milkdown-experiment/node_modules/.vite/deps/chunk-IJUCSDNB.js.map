{
  "version": 3,
  "sources": ["../../nanoid/index.browser.js", "../../@milkdown/utils/src/composable/utils.ts", "../../@milkdown/utils/src/composable/$command.ts", "../../@milkdown/utils/src/composable/$input-rule.ts", "../../@milkdown/utils/src/composable/$mark.ts", "../../@milkdown/utils/src/composable/$node.ts", "../../@milkdown/utils/src/composable/$prose.ts", "../../@milkdown/utils/src/composable/$shortcut.ts", "../../@milkdown/utils/src/composable/$view.ts", "../../@milkdown/utils/src/composable/$ctx.ts", "../../@milkdown/utils/src/composable/composed/$node-schema.ts", "../../@milkdown/utils/src/composable/composed/$mark-schema.ts", "../../@milkdown/utils/src/composable/composed/$user-keymap.ts", "../../@milkdown/utils/src/composable/composed/$attr.ts", "../../@milkdown/utils/src/composable/composed/$remark.ts", "../../@milkdown/utils/src/macro/call-command.ts", "../../@milkdown/utils/src/macro/force-update.ts", "../../@milkdown/utils/src/macro/get-html.ts", "../../@milkdown/utils/src/macro/get-markdown.ts", "../../@milkdown/utils/src/macro/insert.ts", "../../@milkdown/utils/src/macro/outline.ts", "../../@milkdown/utils/src/macro/replace-all.ts", "../../@milkdown/utils/src/macro/set-attr.ts", "../../@milkdown/utils/src/pipe.ts"],
  "sourcesContent": ["/* @ts-self-types=\"./index.d.ts\" */\nimport { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step | 0\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length >= size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size | 0, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array((size |= 0)))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n", "import type {\n  Cleanup,\n  Ctx,\n  MilkdownPlugin,\n  SliceType,\n  TimerType,\n} from '@milkdown/ctx'\n\nimport { createTimer } from '@milkdown/ctx'\nimport { customAlphabet } from 'nanoid'\n\n/// @internal\nexport const nanoid = customAlphabet('abcedfghicklmn', 10)\n\n/// @internal\nexport type WithTimer<T> = T & { timer: TimerType }\n\n/// @internal\nexport function addTimer<\n  T extends MilkdownPlugin,\n  PluginWithTimer extends T = WithTimer<T>,\n>(\n  runner: (\n    ctx: Ctx,\n    plugin: PluginWithTimer,\n    done: () => void\n  ) => Promise<void | Cleanup>,\n  injectTo: SliceType<TimerType[], string>,\n  timerName?: string\n): PluginWithTimer {\n  const timer = createTimer(timerName || nanoid())\n  let doneCalled = false\n\n  const plugin: MilkdownPlugin = (ctx) => {\n    ctx.record(timer)\n    ctx.update(injectTo, (x) => x.concat(timer))\n\n    return async () => {\n      const done = () => {\n        ctx.done(timer)\n        doneCalled = true\n      }\n\n      const cleanup = await runner(ctx, <PluginWithTimer>plugin, done)\n\n      if (!doneCalled) ctx.done(timer)\n\n      return () => {\n        ctx.update(injectTo, (x) => x.filter((y) => y !== timer))\n        ctx.clearTimer(timer)\n        if (cleanup) {\n          const result = cleanup()\n          if (result && 'then' in result) {\n            result.catch(console.error)\n          }\n        }\n      }\n    }\n  }\n  ;(<T & { timer: TimerType }>plugin).timer = timer\n\n  return <PluginWithTimer>plugin\n}\n", "import type { Cmd, CmdKey } from '@milkdown/core'\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\n\nimport {\n  CommandsReady,\n  commandsCtx,\n  commandsTimerCtx,\n  createCmdKey,\n} from '@milkdown/core'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Command<T> = MilkdownPlugin & {\n  run: (payload?: T) => boolean\n  key: CmdKey<T>\n}\n\n/// Create a command plugin. The command will be registered in the `commandsCtx` and can be called by other parts of the editor.\n/// It takes a key and a factory function. The factory function will be called when the plugin is created.\n/// The factory should return a function that will be called when the command is executed.\n/// The function should receive at **most one parameter**, which is the payload of the command.\n/// And the payload should always be **optional**.\n///\n/// ```ts\n/// import { setBlockType } from '@milkdown/prose/commands'\n///\n/// const commandPlugin = $command('SetAsHeading', (ctx) => {\n///   return (level = 1) => setBlockType(headingSchema.type(), { level });\n/// });\n/// ```\n///\n/// Additional property:\n/// - `key`: The key of the command.\n/// - `run`: The function to run the command.\n///\n/// You can use `callCommand` in `editor.action` to call the command.\n///\n/// ```ts\n/// import { callCommand } from '@milkdown/utils';\n/// const editor = Editor.make().use(/* some plugins */).use(commandPlugin).create();\n///\n/// editor.action(callCommand(commandPlugin.key, 3));\n/// ```\nexport function $command<T, K extends string>(\n  key: K,\n  cmd: (ctx: Ctx) => Cmd<T>\n): $Command<T> {\n  const cmdKey = createCmdKey<T>(key)\n\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    ;(<$Command<T>>plugin).key = cmdKey\n    await ctx.wait(CommandsReady)\n    const command = cmd(ctx)\n    ctx.get(commandsCtx).create(cmdKey, command)\n    ;(<$Command<T>>plugin).run = (payload?: T) =>\n      ctx.get(commandsCtx).call(key, payload)\n\n    return () => {\n      ctx.get(commandsCtx).remove(cmdKey)\n    }\n  }\n\n  return <$Command<T>>plugin\n}\n\n/// The async version for `$command`. You can use `await` in the factory when creating the command.\n/// ```ts\n/// const commandPlugin = $commandASync('LoadRemoteDoc', (ctx) => {\n///   return async (url = 'my-remote-api') => {\n///     const doc = await LoadRemoteDoc(url);\n///     return addDoc(doc);\n///   }\n/// });\n/// ```\n///\n/// Additional property:\n/// - `key`: The key of the command.\n/// - `run`: The function to run the command.\n/// - `timer`: The timer which will be resolved when the command is ready.\nexport function $commandAsync<T, K extends string>(\n  key: K,\n  cmd: (ctx: Ctx) => Promise<Cmd<T>>,\n  timerName?: string\n) {\n  const cmdKey = createCmdKey<T>(key)\n  return addTimer<$Command<T>>(\n    async (ctx, plugin) => {\n      await ctx.wait(CommandsReady)\n      const command = await cmd(ctx)\n      ctx.get(commandsCtx).create(cmdKey, command)\n      ;(<$Command<T>>plugin).run = (payload?: T) =>\n        ctx.get(commandsCtx).call(key, payload)\n      ;(<$Command<T>>plugin).key = cmdKey\n      return () => {\n        ctx.get(commandsCtx).remove(cmdKey)\n      }\n    },\n    commandsTimerCtx,\n    timerName\n  )\n}\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { InputRule } from '@milkdown/prose/inputrules'\n\nimport { SchemaReady, editorStateTimerCtx, inputRulesCtx } from '@milkdown/core'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $InputRule = MilkdownPlugin & {\n  inputRule: InputRule\n}\n\n/// Create an input rule plugin.\n/// It takes a factory function which returns a [prosemirror input rule](https://prosemirror.net/docs/ref/#inputrules.InputRule).\n///\n/// Additional property:\n/// - `inputRule`: The prosemirror input rule created.\nexport function $inputRule(inputRule: (ctx: Ctx) => InputRule): $InputRule {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(SchemaReady)\n    const ir = inputRule(ctx)\n    ctx.update(inputRulesCtx, (irs) => [...irs, ir])\n    ;(<$InputRule>plugin).inputRule = ir\n\n    return () => {\n      ctx.update(inputRulesCtx, (irs) => irs.filter((x) => x !== ir))\n    }\n  }\n\n  return <$InputRule>plugin\n}\n\n/// The async version for `$inputRule`. You can use `await` in the factory when creating the input rule.\n///\n/// Additional property:\n/// - `inputRule`: The prosemirror input rule created.\n/// - `timer`: The timer which will be resolved when the input rule is ready.\nexport function $inputRuleAsync(\n  inputRule: (ctx: Ctx) => Promise<InputRule>,\n  timerName?: string\n) {\n  return addTimer<$InputRule>(\n    async (ctx, plugin) => {\n      await ctx.wait(SchemaReady)\n      const ir = await inputRule(ctx)\n      ctx.update(inputRulesCtx, (irs) => [...irs, ir])\n      plugin.inputRule = ir\n      return () => {\n        ctx.update(inputRulesCtx, (irs) => irs.filter((x) => x !== ir))\n      }\n    },\n    editorStateTimerCtx,\n    timerName\n  )\n}\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { MarkType } from '@milkdown/prose/model'\nimport type { MarkSchema } from '@milkdown/transformer'\n\nimport { marksCtx, schemaCtx, schemaTimerCtx } from '@milkdown/core'\nimport { missingMarkInSchema } from '@milkdown/exception'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Mark = MilkdownPlugin & {\n  id: string\n  schema: MarkSchema\n  type: (ctx: Ctx) => MarkType\n}\n\n/// Create a mark plugin.\n/// It takes a mark id and a factory function.\n/// The factory should return a function that returns a [mark schema](/transformer#interface-markschema).\n///\n/// Additional property:\n/// - `id`: The id of the mark.\n/// - `schema`: The mark schema created.\n/// - `type`: A function that will return the [prosemirror mark type](https://prosemirror.net/docs/ref/#model.MarkType).\nexport function $mark(id: string, schema: (ctx: Ctx) => MarkSchema): $Mark {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    const markSchema = schema(ctx)\n    ctx.update(marksCtx, (ns) => [\n      ...ns.filter((n) => n[0] !== id),\n      [id, markSchema] as [string, MarkSchema],\n    ])\n    ;(<$Mark>plugin).id = id\n    ;(<$Mark>plugin).schema = markSchema\n\n    return () => {\n      ctx.update(marksCtx, (ns) => ns.filter(([x]) => x !== id))\n    }\n  }\n  ;(<$Mark>plugin).type = (ctx) => {\n    const markType = ctx.get(schemaCtx).marks[id]\n    if (!markType) throw missingMarkInSchema(id)\n    return markType\n  }\n\n  return <$Mark>plugin\n}\n\n/// The async version for `$mark`. You can use `await` in the factory when creating the mark schema.\n///\n/// Additional property:\n/// - `id`: The id of the mark.\n/// - `schema`: The mark schema created.\n/// - `type`: A function that will return the [prosemirror mark type](https://prosemirror.net/docs/ref/#model.MarkType).\n/// - `timer`: The timer which will be resolved when the mark schema is ready.\nexport function $markAsync(\n  id: string,\n  schema: (ctx: Ctx) => Promise<MarkSchema>,\n  timerName?: string\n) {\n  const plugin = addTimer<$Mark>(\n    async (ctx, plugin, done) => {\n      const markSchema = await schema(ctx)\n      ctx.update(marksCtx, (ns) => [\n        ...ns.filter((n) => n[0] !== id),\n        [id, markSchema] as [string, MarkSchema],\n      ])\n\n      plugin.id = id\n      plugin.schema = markSchema\n      done()\n\n      return () => {\n        ctx.update(marksCtx, (ns) => ns.filter(([x]) => x !== id))\n      }\n    },\n    schemaTimerCtx,\n    timerName\n  )\n\n  plugin.type = (ctx) => {\n    const markType = ctx.get(schemaCtx).marks[id]\n    if (!markType) throw missingMarkInSchema(id)\n    return markType\n  }\n\n  return plugin\n}\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { NodeType } from '@milkdown/prose/model'\nimport type { NodeSchema } from '@milkdown/transformer'\n\nimport { nodesCtx, schemaCtx, schemaTimerCtx } from '@milkdown/core'\nimport { missingNodeInSchema } from '@milkdown/exception'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Node = MilkdownPlugin & {\n  id: string\n  schema: NodeSchema\n  type: (ctx: Ctx) => NodeType\n}\n\n/// Create a node plugin.\n/// It takes a node id and a factory function.\n/// The factory should return a function that returns a [node schema](/transformer#interface-nodeschema).\n///\n/// Additional property:\n/// - `id`: The id of the node.\n/// - `schema`: The node schema created.\n/// - `type`: A function that will return the [prosemirror node type](https://prosemirror.net/docs/ref/#model.NodeType).\nexport function $node(id: string, schema: (ctx: Ctx) => NodeSchema): $Node {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    const nodeSchema = schema(ctx)\n    ctx.update(nodesCtx, (ns) => [\n      ...ns.filter((n) => n[0] !== id),\n      [id, nodeSchema] as [string, NodeSchema],\n    ])\n    ;(<$Node>plugin).id = id\n    ;(<$Node>plugin).schema = nodeSchema\n\n    return () => {\n      ctx.update(nodesCtx, (ns) => ns.filter(([x]) => x !== id))\n    }\n  }\n\n  ;(<$Node>plugin).type = (ctx) => {\n    const nodeType = ctx.get(schemaCtx).nodes[id]\n    if (!nodeType) throw missingNodeInSchema(id)\n\n    return nodeType\n  }\n\n  return <$Node>plugin\n}\n\n/// The async version for `$node`. You can use `await` in the factory when creating the node schema.\n///\n/// Additional property:\n/// - `id`: The id of the node.\n/// - `schema`: The node schema created.\n/// - `type`: A function that will return the [prosemirror node type](https://prosemirror.net/docs/ref/#model.NodeType).\n/// - `timer`: The timer which will be resolved when the node schema is ready.\nexport function $nodeAsync(\n  id: string,\n  schema: (ctx: Ctx) => Promise<NodeSchema>,\n  timerName?: string\n) {\n  const plugin = addTimer<$Node>(\n    async (ctx, plugin, done) => {\n      const nodeSchema = await schema(ctx)\n      ctx.update(nodesCtx, (ns) => [\n        ...ns.filter((n) => n[0] !== id),\n        [id, nodeSchema] as [string, NodeSchema],\n      ])\n\n      plugin.id = id\n      plugin.schema = nodeSchema\n      done()\n\n      return () => {\n        ctx.update(nodesCtx, (ns) => ns.filter(([x]) => x !== id))\n      }\n    },\n    schemaTimerCtx,\n    timerName\n  )\n\n  plugin.type = (ctx) => {\n    const nodeType = ctx.get(schemaCtx).nodes[id]\n    if (!nodeType) throw missingNodeInSchema(id)\n\n    return nodeType\n  }\n\n  return plugin\n}\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { Plugin, PluginKey } from '@milkdown/prose/state'\n\nimport {\n  SchemaReady,\n  editorStateTimerCtx,\n  prosePluginsCtx,\n} from '@milkdown/core'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Prose = MilkdownPlugin & {\n  plugin: () => Plugin\n  key: () => PluginKey | undefined\n}\n\n/// Create a milkdown wrapper for [prosemirror plugin](https://prosemirror.net/docs/ref/#state.Plugin).\n/// It takes a factory function which returns a [prosemirror plugin](https://prosemirror.net/docs/ref/#state.Plugin).\n///\n/// Additional property:\n/// - `plugin`: The prosemirror plugin created.\n/// - `key`: The [prosemirror plugin key](https://prosemirror.net/docs/ref/#state.PluginKey) of the plugin.\nexport function $prose(prose: (ctx: Ctx) => Plugin): $Prose {\n  let prosePlugin: Plugin | undefined\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(SchemaReady)\n    prosePlugin = prose(ctx)\n    ctx.update(prosePluginsCtx, (ps) => [...ps, prosePlugin!])\n\n    return () => {\n      ctx.update(prosePluginsCtx, (ps) => ps.filter((x) => x !== prosePlugin))\n    }\n  }\n  ;(<$Prose>plugin).plugin = () => prosePlugin!\n  ;(<$Prose>plugin).key = () => prosePlugin!.spec.key\n\n  return <$Prose>plugin\n}\n\n/// The async version for `$prose`. You can use `await` in the factory when creating the plugin.\n///\n/// Additional property:\n/// - `plugin`: The prosemirror plugin created.\n/// - `key`: The [prosemirror plugin key](https://prosemirror.net/docs/ref/#state.PluginKey) of the plugin.\n/// - `timer`: The timer which will be resolved when the plugin is ready.\nexport function $proseAsync(\n  prose: (ctx: Ctx) => Promise<Plugin>,\n  timerName?: string\n) {\n  let prosePlugin: Plugin | undefined\n  const plugin = addTimer<$Prose>(\n    async (ctx) => {\n      await ctx.wait(SchemaReady)\n      prosePlugin = await prose(ctx)\n      ctx.update(prosePluginsCtx, (ps) => [...ps, prosePlugin!])\n\n      return () => {\n        ctx.update(prosePluginsCtx, (ps) => ps.filter((x) => x !== prosePlugin))\n      }\n    },\n    editorStateTimerCtx,\n    timerName\n  )\n\n  plugin.plugin = () => prosePlugin!\n  plugin.key = () => prosePlugin!.spec.key\n\n  return plugin\n}\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { Command } from '@milkdown/prose/state'\n\nimport {\n  SchemaReady,\n  editorStateTimerCtx,\n  prosePluginsCtx,\n} from '@milkdown/core'\nimport { keymap } from '@milkdown/prose/keymap'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type Keymap = Record<string, Command>\n\n/// @internal\nexport type $Shortcut = MilkdownPlugin & {\n  keymap: Keymap\n}\n\n/// Create a shortcut for the editor.\n/// It takes a factory function which returns a [prosemirror keymap](https://prosemirror.net/docs/ref/#keymap).\n///\n/// Additional property:\n/// - `keymap`: The prosemirror keymap created.\nexport function $shortcut(shortcut: (ctx: Ctx) => Keymap): $Shortcut {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(SchemaReady)\n    const k = shortcut(ctx)\n    const keymapPlugin = keymap(k)\n    ctx.update(prosePluginsCtx, (ps) => [...ps, keymapPlugin])\n    ;(<$Shortcut>plugin).keymap = k\n\n    return () => {\n      ctx.update(prosePluginsCtx, (ps) => ps.filter((x) => x !== keymapPlugin))\n    }\n  }\n\n  return <$Shortcut>plugin\n}\n\n/// The async version for `$shortcut`. You can use `await` in the factory when creating the keymap.\n///\n/// Additional property:\n/// - `keymap`: The prosemirror keymap created.\n/// - `timer`: The timer which will be resolved when the plugin is ready.\nexport function $shortcutAsync(\n  shortcut: (ctx: Ctx) => Promise<Keymap>,\n  timerName?: string\n) {\n  return addTimer<$Shortcut>(\n    async (ctx, plugin) => {\n      await ctx.wait(SchemaReady)\n      const k = await shortcut(ctx)\n      const keymapPlugin = keymap(k)\n      ctx.update(prosePluginsCtx, (ps) => [...ps, keymapPlugin])\n      plugin.keymap = k\n\n      return () => {\n        ctx.update(prosePluginsCtx, (ps) =>\n          ps.filter((x) => x !== keymapPlugin)\n        )\n      }\n    },\n    editorStateTimerCtx,\n    timerName\n  )\n}\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type {\n  MarkViewConstructor,\n  NodeViewConstructor,\n} from '@milkdown/prose/view'\n\nimport {\n  SchemaReady,\n  editorViewTimerCtx,\n  markViewCtx,\n  nodeViewCtx,\n} from '@milkdown/core'\nimport { NodeType } from '@milkdown/prose/model'\n\nimport type { $Mark, $Node } from '.'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $View<\n  T extends $Node | $Mark,\n  V extends NodeViewConstructor | MarkViewConstructor,\n> = MilkdownPlugin & {\n  view: V\n  type: T\n}\n\n/// @internal\nexport type GetConstructor<T extends $Node | $Mark> = T extends $Node\n  ? NodeViewConstructor\n  : T extends $Mark\n    ? MarkViewConstructor\n    : NodeViewConstructor | MarkViewConstructor\n\n/// Create a [prosemirror node/mark view](https://prosemirror.net/docs/ref/#view.NodeView) plugin.\n/// It takes two arguments\n/// - `type`: The node/mark plugin that needs to add a view.\n/// - `view`: The factory that creates the view. It should return a function that returns a [node/mark view constructor](https://prosemirror.net/docs/ref/#view.NodeView).\n///\n/// Additional property:\n/// - `view`: The view created.\n/// - `type`: The node/mark plugin that needs to add a view.\nexport function $view<\n  T extends $Node | $Mark,\n  V extends NodeViewConstructor | MarkViewConstructor = GetConstructor<T>,\n>(type: T, view: (ctx: Ctx) => V): $View<T, V> {\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(SchemaReady)\n    const v = view(ctx)\n    if (type.type(ctx) instanceof NodeType)\n      ctx.update(nodeViewCtx, (ps) => [\n        ...ps,\n        [type.id, v] as [string, NodeViewConstructor],\n      ])\n    else\n      ctx.update(markViewCtx, (ps) => [\n        ...ps,\n        [type.id, v] as [string, MarkViewConstructor],\n      ])\n    ;(<$View<T, V>>plugin).view = v\n    ;(<$View<T, V>>plugin).type = type\n\n    return () => {\n      if (type.type(ctx) instanceof NodeType)\n        ctx.update(nodeViewCtx, (ps) => ps.filter((x) => x[0] !== type.id))\n      else ctx.update(markViewCtx, (ps) => ps.filter((x) => x[0] !== type.id))\n    }\n  }\n\n  return <$View<T, V>>plugin\n}\n\n/// The async version for `$view`. You can use `await` in the factory when creating the view.\n///\n/// Additional property:\n/// - `view`: The view created.\n/// - `type`: The node/mark plugin that needs to add a view.\n/// - `timer`: The timer which will be resolved when the view is ready.\nexport function $viewAsync<\n  T extends $Node | $Mark,\n  V extends NodeViewConstructor | MarkViewConstructor = GetConstructor<T>,\n>(type: T, view: (ctx: Ctx) => Promise<V>, timerName?: string) {\n  return addTimer<$View<T, V>>(\n    async (ctx, plugin) => {\n      await ctx.wait(SchemaReady)\n      const v = await view(ctx)\n      if (type.type(ctx) instanceof NodeType)\n        ctx.update(nodeViewCtx, (ps) => [\n          ...ps,\n          [type.id, v] as [string, NodeViewConstructor],\n        ])\n      else\n        ctx.update(markViewCtx, (ps) => [\n          ...ps,\n          [type.id, v] as [string, MarkViewConstructor],\n        ])\n\n      plugin.view = v\n      plugin.type = type\n\n      return () => {\n        if (type.type(ctx) instanceof NodeType)\n          ctx.update(nodeViewCtx, (ps) => ps.filter((x) => x[0] !== type.id))\n        else ctx.update(markViewCtx, (ps) => ps.filter((x) => x[0] !== type.id))\n      }\n    },\n    editorViewTimerCtx,\n    timerName\n  )\n}\n", "import type { MilkdownPlugin, SliceType } from '@milkdown/ctx'\n\nimport { createSlice } from '@milkdown/ctx'\n\n/// @internal\nexport type $Ctx<T, N extends string> = MilkdownPlugin & {\n  key: SliceType<T, N>\n}\n\n/// Create a slice plugin. The plugin will be registered in the `ctx` and can be accessed by other parts of the editor.\n/// ```ts\n/// const counterCtx = $ctx(0, 'counter');\n/// ```\n///\n/// Additional property:\n/// - `key`: The key of the slice.\nexport function $ctx<T, N extends string>(value: T, name: N): $Ctx<T, N> {\n  const slice = createSlice(value, name)\n  const plugin: $Ctx<T, N> = (ctx) => {\n    ctx.inject(slice)\n    return () => {\n      return () => {\n        ctx.remove(slice)\n      }\n    }\n  }\n\n  plugin.key = slice\n\n  return plugin\n}\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { NodeSchema } from '@milkdown/transformer'\n\nimport { nodesCtx } from '@milkdown/core'\n\nimport type { $Ctx } from '../$ctx'\nimport type { $Node } from '../$node'\n\nimport { $ctx } from '../$ctx'\nimport { $node } from '../$node'\n\n/// @internal\nexport type GetNodeSchema = (ctx: Ctx) => NodeSchema\n\n/// @internal\nexport type $NodeSchema<T extends string> = [\n  schemaCtx: $Ctx<GetNodeSchema, T>,\n  schema: $Node,\n] & {\n  id: $Node['id']\n  type: $Node['type']\n  node: $Node\n  ctx: $Ctx<GetNodeSchema, T>\n  schema: NodeSchema\n  key: $Ctx<GetNodeSchema, T>['key']\n  extendSchema: (\n    handler: (prev: GetNodeSchema) => GetNodeSchema\n  ) => MilkdownPlugin\n}\n\n/// Create a plugin for node schema.\n/// The first parameter is the id of the node schema.\n/// The second parameter is the function that returns the node schema.\n///\n/// The function will return a plugin with additional properties:\n/// - `id`: The id of the node schema.\n/// - `type`: A function witch will return the type of the node schema.\n/// - `ctx`: The context of the node schema.\n/// - `node`: The node schema plugin.\n/// - `schema`: The node schema.\n/// - `key`: The key of slice which contains the node schema factory.\n/// - `extendSchema`: A function witch will return a plugin that can extend the node schema.\nexport function $nodeSchema<T extends string>(\n  id: T,\n  schema: GetNodeSchema\n): $NodeSchema<T> {\n  const schemaCtx = $ctx(schema, id)\n\n  const nodeSchema = $node(id, (ctx) => {\n    const userSchema = ctx.get(schemaCtx.key)\n    return userSchema(ctx)\n  })\n\n  const result = [schemaCtx, nodeSchema] as $NodeSchema<T>\n  result.id = nodeSchema.id\n  result.node = nodeSchema\n\n  result.type = (ctx: Ctx) => nodeSchema.type(ctx)\n  result.schema = nodeSchema.schema\n  result.ctx = schemaCtx\n  result.key = schemaCtx.key\n  result.extendSchema = (handler): MilkdownPlugin => {\n    return (ctx) => () => {\n      const prev = ctx.get(schemaCtx.key)\n      const next = handler(prev)\n      const nodeSchema = next(ctx)\n      ctx.update(nodesCtx, (ns) => [\n        ...ns.filter((n) => n[0] !== id),\n        [id, nodeSchema] as [string, NodeSchema],\n      ])\n      result.schema = nodeSchema\n    }\n  }\n\n  return result\n}\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { MarkSchema } from '@milkdown/transformer'\n\nimport { marksCtx } from '@milkdown/core'\n\nimport type { $Ctx } from '../$ctx'\nimport type { $Mark } from '../$mark'\n\nimport { $ctx } from '../$ctx'\nimport { $mark } from '../$mark'\n\n/// @internal\nexport type GetMarkSchema = (ctx: Ctx) => MarkSchema\n\n/// @internal\nexport type $MarkSchema<T extends string> = [\n  schemaCtx: $Ctx<GetMarkSchema, T>,\n  schema: $Mark,\n] & {\n  id: $Mark['id']\n  type: $Mark['type']\n  mark: $Mark\n  ctx: $Ctx<GetMarkSchema, T>\n  schema: MarkSchema\n  key: $Ctx<GetMarkSchema, T>['key']\n  extendSchema: (\n    handler: (prev: GetMarkSchema) => GetMarkSchema\n  ) => MilkdownPlugin\n}\n\n/// Create a plugin for mark schema.\n/// The first parameter is the id of the mark schema.\n/// The second parameter is the function that returns the mark schema.\n///\n/// The function will return a plugin with additional properties:\n/// - `id`: The id of the mark schema.\n/// - `type`: A function witch will return the type of the mark schema.\n/// - `ctx`: The context of the mark schema.\n/// - `mark`: The mark schema plugin.\n/// - `schema`: The mark schema.\n/// - `key`: The key of slice which contains the mark schema factory.\n/// - `extendSchema`: A function witch will return a plugin that can extend the mark schema.\nexport function $markSchema<T extends string>(\n  id: T,\n  schema: GetMarkSchema\n): $MarkSchema<T> {\n  const schemaCtx = $ctx(schema, id)\n\n  const markSchema = $mark(id, (ctx) => {\n    const userSchema = ctx.get(schemaCtx.key)\n    return userSchema(ctx)\n  })\n\n  const result = [schemaCtx, markSchema] as $MarkSchema<T>\n  result.id = markSchema.id\n  result.mark = markSchema\n  result.type = markSchema.type\n  result.schema = markSchema.schema\n  result.ctx = schemaCtx\n  result.key = schemaCtx.key\n  result.extendSchema = (handler): MilkdownPlugin => {\n    return (ctx) => () => {\n      const prev = ctx.get(schemaCtx.key)\n      const next = handler(prev)\n      const markSchema = next(ctx)\n      ctx.update(marksCtx, (ms) => [\n        ...ms.filter((m) => m[0] !== id),\n        [id, markSchema] as [string, MarkSchema],\n      ])\n      result.schema = markSchema\n    }\n  }\n\n  return result\n}\n", "import type { Ctx, SliceType } from '@milkdown/ctx'\nimport type { Command } from '@milkdown/prose/state'\n\nimport type { $Ctx } from '../$ctx'\nimport type { $Shortcut, Keymap } from '../$shortcut'\n\nimport { $ctx } from '../$ctx'\nimport { $shortcut } from '../$shortcut'\n\n/// @internal\nexport type KeymapConfig<K extends string> = Record<K, string | string[]>\n\n/// @internal\nexport interface KeymapItem {\n  shortcuts: string | string[]\n  command: (ctx: Ctx) => Command\n}\n\n/// @internal\nexport type UserKeymapConfig<Key extends string> = Record<Key, KeymapItem>\n\n/// @internal\nexport type $UserKeymap<N extends string, Key extends string> = [\n  $Ctx<KeymapConfig<Key>, `${N}Keymap`>,\n  $Shortcut,\n] & {\n  key: SliceType<KeymapConfig<Key>, `${N}Keymap`>\n  keymap: Keymap\n  ctx: $Ctx<KeymapConfig<Key>, `${N}Keymap`>\n  shortcuts: $Shortcut\n}\n\n/// Create a keymap which can be customized by user.\n/// It takes two arguments:\n/// - `name`: The name of the keymap.\n/// - `userKeymap`: The keymap config which contains the shortcuts and the command.\nexport function $useKeymap<N extends string, Key extends string>(\n  name: N,\n  userKeymap: UserKeymapConfig<Key>\n) {\n  const key = Object.fromEntries(\n    Object.entries<KeymapItem>(userKeymap).map(([key, { shortcuts }]) => {\n      return [key, shortcuts]\n    })\n  ) as Record<Key, string | string[]>\n\n  const keymapDef = $ctx<KeymapConfig<Key>, `${N}Keymap`>(key, `${name}Keymap`)\n\n  const shortcuts = $shortcut((ctx) => {\n    const keys = ctx.get(keymapDef.key)\n\n    const keymapTuple = Object.entries<KeymapItem>(userKeymap).flatMap(\n      ([key, { command }]) => {\n        const targetKeys: string[] = [keys[key as Key]].flat()\n\n        return targetKeys.map((targetKey) => [targetKey, command(ctx)] as const)\n      }\n    )\n\n    return Object.fromEntries(keymapTuple)\n  })\n\n  const result = [keymapDef, shortcuts] as $UserKeymap<N, Key>\n  result.ctx = keymapDef\n  result.shortcuts = shortcuts\n  result.key = keymapDef.key\n  result.keymap = shortcuts.keymap\n\n  return result\n}\n", "import type { Mark, Node } from '@milkdown/prose/model'\n\nimport type { $Ctx } from '../$ctx'\n\nimport { $ctx } from '../$ctx'\n\n/// @internal\nexport type $NodeAttr = $Ctx<\n  (node: Node) => Record<string, any>,\n  `${string}Attr`\n>\n\n/// Create a slice which contains the attributes for node schema.\nexport const $nodeAttr = (\n  name: string,\n  value: (node: Node) => Record<string, any> = () => ({})\n): $NodeAttr => $ctx(value, `${name}Attr`)\n\n/// @internal\nexport type $MarkAttr = $Ctx<\n  (node: Mark) => Record<string, any>,\n  `${string}Attr`\n>\n\n/// Create a slice which contains the attributes for mark schema.\nexport const $markAttr = (\n  name: string,\n  value: (mark: Mark) => Record<string, any> = () => ({})\n): $MarkAttr => $ctx(value, `${name}Attr`)\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport type { RemarkPlugin, RemarkPluginRaw } from '@milkdown/transformer'\n\nimport { InitReady, remarkPluginsCtx } from '@milkdown/core'\n\nimport type { $Ctx } from '../$ctx'\n\nimport { $ctx } from '../$ctx'\n\n/// @internal\nexport type $Remark<Id extends string, Options> = [\n  optionsCtx: $Ctx<Options, Id>,\n  plugin: MilkdownPlugin,\n] & {\n  id: Id\n  plugin: MilkdownPlugin\n  options: $Ctx<Options, Id>\n}\n\n/// Create a milkdown wrapper for [remark plugin](https://github.com/remarkjs/remark/blob/main/doc/plugins.md).\n/// It takes a factory function which returns a [remark plugin](https://github.com/remarkjs/remark/blob/main/doc/plugins.md).\n///\n/// Additional property:\n/// - `id`: The id of the remark plugin.\n/// - `plugin`: The remark plugin created.\n/// - `options`: The ctx contains the options of the remark plugin.\nexport function $remark<Id extends string, Options>(\n  id: Id,\n  remark: (ctx: Ctx) => RemarkPluginRaw<Options>,\n  initialOptions?: Options\n): $Remark<Id, Options> {\n  const options = $ctx<Options, Id>(initialOptions ?? ({} as Options), id)\n  const plugin: MilkdownPlugin = (ctx) => async () => {\n    await ctx.wait(InitReady)\n    const re = remark(ctx)\n    const remarkPlugin: RemarkPlugin<Options> = {\n      plugin: re,\n      options: ctx.get(options.key),\n    }\n    ctx.update(remarkPluginsCtx, (rp) => [...rp, remarkPlugin as RemarkPlugin])\n\n    return () => {\n      ctx.update(remarkPluginsCtx, (rp) => rp.filter((x) => x !== remarkPlugin))\n    }\n  }\n\n  const result = [options, plugin] as $Remark<Id, Options>\n  result.id = id\n  result.plugin = plugin\n  result.options = options\n\n  return result\n}\n", "import type { CmdKey } from '@milkdown/core'\nimport type { Ctx } from '@milkdown/ctx'\n\nimport { commandsCtx } from '@milkdown/core'\n\ntype InferParams<T> = T extends CmdKey<infer U> ? U : never\n\n/// Call a command. You can pass the command key and the payload to the macro.\nexport function callCommand<T extends CmdKey<any>>(\n  slice: string,\n  payload?: InferParams<T>\n): (ctx: Ctx) => boolean\nexport function callCommand<T>(\n  slice: CmdKey<T>,\n  payload?: T\n): (ctx: Ctx) => boolean\nexport function callCommand(\n  slice: string | CmdKey<any>,\n  payload?: any\n): (ctx: Ctx) => boolean\nexport function callCommand(\n  slice: string | CmdKey<any>,\n  payload?: any\n): (ctx: Ctx) => boolean {\n  return (ctx: Ctx) => {\n    return ctx.get(commandsCtx).call(slice, payload)\n  }\n}\n", "import type { Ctx } from '@milkdown/ctx'\n\nimport { editorViewCtx } from '@milkdown/core'\n\n/// Force update the editor.\nexport function forceUpdate() {\n  return (ctx: Ctx): void => {\n    const view = ctx.get(editorViewCtx)\n    const { tr } = view.state\n\n    const nextTr = Object.assign(Object.create(tr), tr).setTime(Date.now())\n    return view.dispatch(nextTr)\n  }\n}\n", "import type { Ctx } from '@milkdown/ctx'\n\nimport { editorViewCtx, schemaCtx } from '@milkdown/core'\nimport { DOMSerializer } from '@milkdown/prose/model'\n\n/// Get content of the editor as HTML string.\nexport function getHTML() {\n  return (ctx: Ctx): string => {\n    const div = document.createElement('div')\n    const schema = ctx.get(schemaCtx)\n    const view = ctx.get(editorViewCtx)\n    const fragment = DOMSerializer.fromSchema(schema).serializeFragment(\n      view.state.doc.content\n    )\n\n    div.appendChild(fragment)\n\n    return div.innerHTML\n  }\n}\n", "import type { Ctx } from '@milkdown/ctx'\n\nimport { editorViewCtx, serializerCtx } from '@milkdown/core'\n\n/// Get content of the editor as markdown string.\nexport function getMarkdown() {\n  return (ctx: Ctx): string => {\n    const view = ctx.get(editorViewCtx)\n    const serializer = ctx.get(serializerCtx)\n\n    return serializer(view.state.doc)\n  }\n}\n", "import type { Ctx } from '@milkdown/ctx'\n\nimport { editorViewCtx, parserCtx } from '@milkdown/core'\nimport { Slice } from '@milkdown/prose/model'\n\n/// Insert markdown string into the editor.\nexport function insert(markdown: string) {\n  return (ctx: Ctx) => {\n    const view = ctx.get(editorViewCtx)\n    const parser = ctx.get(parserCtx)\n    const doc = parser(markdown)\n    if (!doc) return\n\n    const contentSlice = view.state.selection.content()\n    return view.dispatch(\n      view.state.tr\n        .replaceSelection(\n          new Slice(doc.content, contentSlice.openStart, contentSlice.openEnd)\n        )\n        .scrollIntoView()\n    )\n  }\n}\n", "import type { Ctx } from '@milkdown/ctx'\n\nimport { editorViewCtx } from '@milkdown/core'\n\n/// Get outline of the editor.\nexport function outline() {\n  return (ctx: Ctx): Array<{ text: string; level: number; id: string }> => {\n    const view = ctx.get(editorViewCtx)\n    const data: { text: string; level: number; id: string }[] = []\n    const doc = view.state.doc\n    doc.descendants((node) => {\n      if (node.type.name === 'heading' && node.attrs.level)\n        data.push({\n          text: node.textContent,\n          level: node.attrs.level,\n          id: node.attrs.id,\n        })\n    })\n    return data\n  }\n}\n", "import type { Ctx } from '@milkdown/ctx'\n\nimport {\n  editorStateOptionsCtx,\n  editorViewCtx,\n  parserCtx,\n  prosePluginsCtx,\n  schemaCtx,\n} from '@milkdown/core'\nimport { Slice } from '@milkdown/prose/model'\nimport { EditorState } from '@milkdown/prose/state'\n\n/// Replace all content of the editor with markdown string.\n/// If flush is true, the editor state will be re-created.\nexport function replaceAll(markdown: string, flush = false) {\n  return (ctx: Ctx): void => {\n    const view = ctx.get(editorViewCtx)\n    const parser = ctx.get(parserCtx)\n    const doc = parser(markdown)\n    if (!doc) return\n\n    if (!flush) {\n      const { state } = view\n      return view.dispatch(\n        state.tr.replace(\n          0,\n          state.doc.content.size,\n          new Slice(doc.content, 0, 0)\n        )\n      )\n    }\n\n    const schema = ctx.get(schemaCtx)\n    const options = ctx.get(editorStateOptionsCtx)\n    const plugins = ctx.get(prosePluginsCtx)\n\n    const state = EditorState.create({\n      schema,\n      doc,\n      plugins,\n      ...options,\n    })\n\n    view.updateState(state)\n  }\n}\n", "import type { Ctx } from '@milkdown/ctx'\nimport type { Attrs } from '@milkdown/prose/model'\n\nimport { editorViewCtx } from '@milkdown/core'\n\n/// Set the attributes of the node at the given position.\nexport function setAttr(pos: number, update: (prevAttrs: Attrs) => Attrs) {\n  return (ctx: Ctx) => {\n    const view = ctx.get(editorViewCtx)\n    const { tr } = view.state\n    const node = tr.doc.nodeAt(pos)\n    if (!node) return\n    const nextAttr = update(node.attrs)\n    return view.dispatch(tr.setNodeMarkup(pos, undefined, nextAttr))\n  }\n}\n", "/// @internal\nexport type Many<T> = T | ReadonlyArray<T>\n\ninterface Pipe {\n  pipe: (<A extends any[], R1, R2, R3, R4, R5, R6, R7>(\n    f1: (...args: A) => R1,\n    f2: (a: R1) => R2,\n    f3: (a: R2) => R3,\n    f4: (a: R3) => R4,\n    f5: (a: R4) => R5,\n    f6: (a: R5) => R6,\n    f7: (a: R6) => R7\n  ) => (...args: A) => R7) &\n    (<A extends any[], R1, R2, R3, R4, R5, R6, R7>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3,\n      f4: (a: R3) => R4,\n      f5: (a: R4) => R5,\n      f6: (a: R5) => R6,\n      f7: (a: R6) => R7,\n      ...func: Array<Many<(a: any) => any>>\n    ) => (...args: A) => any) &\n    (<A extends any[], R1, R2, R3, R4, R5, R6>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3,\n      f4: (a: R3) => R4,\n      f5: (a: R4) => R5,\n      f6: (a: R5) => R6\n    ) => (...args: A) => R6) &\n    (<A extends any[], R1, R2, R3, R4, R5>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3,\n      f4: (a: R3) => R4,\n      f5: (a: R4) => R5\n    ) => (...args: A) => R5) &\n    (<A extends any[], R1, R2, R3, R4>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3,\n      f4: (a: R3) => R4\n    ) => (...args: A) => R4) &\n    (<A extends any[], R1, R2, R3>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2,\n      f3: (a: R2) => R3\n    ) => (...args: A) => R3) &\n    (<A extends any[], R1, R2>(\n      f1: (...args: A) => R1,\n      f2: (a: R1) => R2\n    ) => (...args: A) => R2) &\n    ((...func: Array<Many<(...args: any[]) => any>>) => (...args: any[]) => any)\n}\n\n/// @internal\nexport const pipe: Pipe['pipe'] = (...funcs: any[]) => {\n  const length = funcs.length\n  let index = length\n  while (index--) {\n    if (typeof funcs[index] !== 'function')\n      throw new TypeError('Expected a function')\n  }\n  return (...args: any[]) => {\n    let index = 0\n    let result = length ? funcs[index](...args) : args[0]\n    while (++index < length) result = funcs[index](result)\n\n    return result\n  }\n}\n"],
  "mappings": "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",
  "names": ["schemaCtx", "nodeSchema", "markSchema", "key", "shortcuts"]
}
